package randoop;

/**
 * Means that the execution of a statement threw an exception.
 */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.mustcall.MustCallChecker")
public class ExceptionalExecution extends ExecutionOutcome {

    private final @org.checkerframework.checker.mustcall.qual.MustCall({}) Throwable exception;

    /**
     * @param exception the exception that was thrown
     * @param executionTime the execution time, in nanoseconds
     */
    public ExceptionalExecution(@org.checkerframework.checker.mustcall.qual.MustCall({}) Throwable exception,  @org.checkerframework.checker.mustcall.qual.MustCall({}) long executionTime) {
        super(executionTime);
        if (exception == null) {
            throw new IllegalArgumentException("exception must be non-null");
        }
        this.exception = exception;
    }

    /**
     * Return the exception.
     *
     * @return the exception
     */
    @org.checkerframework.dataflow.qual.Pure
    public @org.checkerframework.checker.mustcall.qual.MustCall({}) Throwable getException(@org.checkerframework.checker.mustcall.qual.MustCall({}) ExceptionalExecution this) {
        return this.exception;
    }

    /**
     * Warning: this method calls toString() of code under test, which may have arbitrary behavior. We
     * use this method in randoop.test.SequenceTests.
     */
    public @org.checkerframework.checker.mustcall.qual.MustCall({}) String toString(@org.checkerframework.checker.mustcall.qual.MustCall({}) ExceptionalExecution this) {
        return String.format("[ExceptionalExecution, %s, at %s]", exception.getClass().getName(), exception.getStackTrace()[0]);
    }
}

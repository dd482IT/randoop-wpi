package randoop.condition;

import java.nio.file.Path;

/**
 * Indicates a problem creating {@link ExecutableBooleanExpression} (usually a syntax error in the
 * condition text) or an exception thrown when evaluating it. This is a user error, not a bug in
 * Randoop.
 */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.mustcall.MustCallChecker")
public class RandoopSpecificationError extends Error {

    private static final  @org.checkerframework.checker.mustcall.qual.MustCall({}) long serialVersionUID = 3517219213949862963L;

    /**
     * Which file was being read when the error occurred.
     */
    @org.checkerframework.checker.mustcall.qual.MustCall({}) Path file = null;

    @org.checkerframework.checker.mustcall.qual.MustCall({}) String thisMessage = null;

    /**
     * Create a {@link RandoopSpecificationError} with the given message.
     *
     * @param message the error message
     */
    @org.checkerframework.dataflow.qual.SideEffectFree
    RandoopSpecificationError(@org.checkerframework.checker.mustcall.qual.MustCall({}) String message) {
        super(message);
    }

    /**
     * Create a {@link RandoopSpecificationError} with the given message and cause.
     *
     * @param message the error message
     * @param cause the causing exception
     */
    @org.checkerframework.dataflow.qual.SideEffectFree
    RandoopSpecificationError(@org.checkerframework.checker.mustcall.qual.MustCall({}) String message, @org.checkerframework.checker.mustcall.qual.MustCall({}) Throwable cause) {
        super(message, cause);
    }

    /**
     * Indicate which file was being read when the error occurred.
     *
     * @param file the file
     */
    public void setFile(@org.checkerframework.checker.mustcall.qual.MustCall({}) RandoopSpecificationError this, @org.checkerframework.checker.mustcall.qual.MustCall({}) Path file) {
        this.file = file;
    }

    /**
     * Set the local message (ignoring the message of the cause).
     *
     * @param message the string to use as the local message for this Error
     */
    public void setThisMessage(String message) {
        thisMessage = message;
    }

    /**
     * Set the local message (ignoring the message of the cause).
     *
     * @return the local message (ignoring the message of the cause)
     */
    @org.checkerframework.dataflow.qual.Pure
    public @org.checkerframework.checker.mustcall.qual.MustCall({}) String getThisMessage() {
        return thisMessage;
    }

    @org.checkerframework.dataflow.qual.Pure
    public @org.checkerframework.checker.mustcall.qual.MustCall({}) String getMessage(@org.checkerframework.checker.mustcall.qual.MustCall({}) RandoopSpecificationError this) {
        String thisLocalMessage = (thisMessage != null ? thisMessage : super.getMessage());
        String fileMessage = (file != null ? (" while reading file " + file) : "");
        String causeMessage = (getCause() != null && getCause().getMessage() != null ? (": " + getCause().getMessage()) : "");
        return thisLocalMessage + fileMessage + causeMessage;
    }
}

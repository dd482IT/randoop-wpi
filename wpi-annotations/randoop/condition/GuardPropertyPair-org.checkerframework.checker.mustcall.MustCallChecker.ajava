package randoop.condition;

/**
 * Represents a pair of an executable guard and an executable property.
 *
 * <p>Corresponds to a {@link randoop.condition.specification.Postcondition}.
 */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.mustcall.MustCallChecker")
public class GuardPropertyPair {

    /**
     * The expression that must hold before the operation is called.
     */
    final @org.checkerframework.checker.mustcall.qual.MustCall({}) ExecutableBooleanExpression guard;

    /**
     * The expression that must be true after the operation is called when the {@link #guard} is true.
     */
    final @org.checkerframework.checker.mustcall.qual.MustCall({}) ExecutableBooleanExpression property;

    /**
     * Creates a {@link GuardPropertyPair} object for the guard and property expressions.
     *
     * @param guard the {@link ExecutableBooleanExpression} to be evaluated before the operation is
     *     called
     * @param property the {@link ExecutableBooleanExpression} to be evaluated after the operation is
     *     called
     */
    GuardPropertyPair(ExecutableBooleanExpression guard, ExecutableBooleanExpression property) {
        this.guard = guard;
        this.property = property;
    }

    @org.checkerframework.dataflow.qual.SideEffectFree
    public @org.checkerframework.checker.mustcall.qual.MustCall({}) String toString(@org.checkerframework.checker.mustcall.qual.MustCall({}) GuardPropertyPair this) {
        return String.format("GuardPropertyPair{guard=%s, property=%s)", guard, property);
    }
}

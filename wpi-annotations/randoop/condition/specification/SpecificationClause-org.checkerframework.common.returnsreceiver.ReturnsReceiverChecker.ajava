package randoop.condition.specification;

import java.util.Objects;

/**
 * Abstract class for representations of conditions that can be attached to methods and
 * constructors.
 *
 * <p>Every specification clause has at least a guard (which this class provides). Some clauses have
 * more parts, so subclasses of this class can add fields.
 */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.common.returnsreceiver.ReturnsReceiverChecker")
public abstract class SpecificationClause {

    // NOTE: changing field names or @SerializedName annotations could affect integration with other
    // tools
    /**
     * The description of this {@link SpecificationClause}.
     */
    private final  String description;

    /**
     * The {@link Guard} for this specification.
     */
    private final  Guard guard;

    /**
     * Gson serialization requires a default constructor.
     */
    protected SpecificationClause() {
        this.description = "";
        this.guard = null;
    }

    /**
     * Creates a {@link SpecificationClause} with the given guard.
     *
     * @param description the description of the created specification
     * @param guard the {@link Guard} for the created specification
     */
    protected SpecificationClause( String description,  Guard guard) {
        this.description = description;
        this.guard = guard;
    }

    /**
     * Returns the description of this {@link SpecificationClause}.
     *
     * @return the description of this specification
     */
    @org.checkerframework.dataflow.qual.Pure
    public  String getDescription( SpecificationClause this) {
        return description;
    }

    /**
     * Return the {@link Guard} of this {@link SpecificationClause}.
     *
     * @return the guard of this specification
     */
    @org.checkerframework.dataflow.qual.Pure
    public  Guard getGuard( SpecificationClause this) {
        return guard;
    }

    @org.checkerframework.dataflow.qual.Pure
    public   boolean equals( SpecificationClause this,  Object object) {
        if (this == object) {
            return true;
        }
        if (!(object instanceof SpecificationClause)) {
            return false;
        }
        SpecificationClause other = (SpecificationClause) object;
        return this.description.equals(other.description) && ((this.guard != null && this.guard.equals(other.guard)) || (this.guard == null && other.guard == null));
    }

    @org.checkerframework.dataflow.qual.Pure
    public   int hashCode( SpecificationClause this) {
        return Objects.hashCode(description);
    }
}

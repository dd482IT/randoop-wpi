package randoop.condition.specification;

import com.google.gson.annotations.SerializedName;
import java.util.Objects;
import org.checkerframework.checker.signature.qual.ClassGetName;

/**
 * A specification clause that an exception should be thrown.
 *
 * <p>The JSON serialization of this class is used to read the specifications for an operation given
 * using the {@code --specifications} command-line option. The JSON should include a JSON object
 * labeled by the name of each field of this class, as in
 *
 * <pre>
 *   {
 *      "exception": "java.lang.IllegalStateException",
 *      "description": "throws IllegalStateException if the connection is already open",
 *      "guard": {
 *         "condition": "receiver.isOpen()",
 *         "description": "if the connection is already open"
 *       }
 *   }
 * </pre>
 *
 * See {@link Guard} for details on specifying guards.
 */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.signature.SignatureChecker")
public class ThrowsCondition extends SpecificationClause {

    // NOTE: changing field names or @SerializedName annotations could affect integration with other
    // tools
    /**
     * The fully-qualified binary name of the type of the expected exception.
     */
    private final String exceptionType;

    /**
     * Gson serialization requires a default constructor.
     */
    @org.checkerframework.framework.qual.EnsuresQualifier(expression = { "this.exceptionType" }, qualifier = org.checkerframework.checker.signature.qual.ClassGetSimpleName.class)
    private ThrowsCondition() {
        super();
        this.exceptionType = "";
    }

    /**
     * Creates a {@link ThrowsCondition} representing an exception expected when the guard is true.
     *
     * @param description the description of the condition
     * @param guard the guard for the specification
     * @param exceptionType the expected exception type
     */
    public ThrowsCondition(String description, Guard guard, String exceptionType) {
        super(description, guard);
        this.exceptionType = exceptionType;
    }

    /**
     * Returns the exception type name for this {@link ThrowsCondition}.
     *
     * @return the exception type name for this throws specification
     */
    @org.checkerframework.dataflow.qual.Pure
    public String getExceptionTypeName(@org.checkerframework.checker.signature.qual.SignatureUnknown ThrowsCondition this) {
        return exceptionType;
    }

    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.signature.qual.SignatureUnknown boolean equals(@org.checkerframework.checker.signature.qual.SignatureUnknown ThrowsCondition this, @org.checkerframework.checker.signature.qual.SignatureUnknown Object object) {
        if (this == object) {
            return true;
        }
        if (!(object instanceof ThrowsCondition)) {
            return false;
        }
        ThrowsCondition other = (ThrowsCondition) object;
        return super.equals(other) && this.exceptionType.equals(other.exceptionType);
    }

    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.signature.qual.SignatureUnknown int hashCode(@org.checkerframework.checker.signature.qual.SignatureUnknown ThrowsCondition this) {
        return Objects.hash(super.hashCode(), exceptionType);
    }

    @org.checkerframework.dataflow.qual.Pure
    public @org.checkerframework.checker.signature.qual.SignatureUnknown String toString(@org.checkerframework.checker.signature.qual.SignatureUnknown ThrowsCondition this) {
        return "{ \"description\": \"" + getDescription() + "\", \"guard\": \"" + getGuard() + ", \"exceptionType\": " + exceptionType + "\" }";
    }
}

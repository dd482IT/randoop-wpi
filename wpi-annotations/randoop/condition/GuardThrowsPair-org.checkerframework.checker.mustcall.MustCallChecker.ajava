package randoop.condition;

/**
 * Represents a pair of a an executable guard expression and an executable throws clause.
 *
 * <p>Corresponds to a {@link randoop.condition.specification.ThrowsCondition}.
 */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.mustcall.MustCallChecker")
class GuardThrowsPair {

    /**
     * The expression that should be true before the operation is called.
     */
    final @org.checkerframework.checker.mustcall.qual.MustCall({}) ExecutableBooleanExpression guard;

    /**
     * The {@link ThrowsClause} representing an exception that is expected to be thrown by the
     * operation if the {@link #guard} is true.
     */
    final @org.checkerframework.checker.mustcall.qual.MustCall({}) ThrowsClause throwsClause;

    /**
     * Creates a {@link GuardThrowsPair} object for the guard expression and throws-clause.
     *
     * @param guard the {@link ExecutableBooleanExpression} to be evaluated before the operation is
     *     called
     * @param throwsClause the {@link ThrowsClause} to be evaluated after the operation is called
     */
    GuardThrowsPair(ExecutableBooleanExpression guard, ThrowsClause throwsClause) {
        this.guard = guard;
        this.throwsClause = throwsClause;
    }

    @org.checkerframework.dataflow.qual.Pure
    public @org.checkerframework.checker.mustcall.qual.MustCall({}) String toString(@org.checkerframework.checker.mustcall.qual.MustCall({}) GuardThrowsPair this) {
        return "GuardThrowsPair(" + guard.getContractSource() + ", " + throwsClause.getExceptionType() + ")";
    }
}

package randoop.contract;

import java.util.Arrays;
import randoop.types.JavaTypes;
import randoop.types.TypeTuple;

/**
 * The contract: {@code x0.equals(x0)==true}.
 */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.mustcall.MustCallChecker")
public final class EqualsReflexive extends ObjectContract {

    private static final @org.checkerframework.checker.mustcall.qual.MustCall({}) EqualsReflexive instance = new EqualsReflexive();

    private EqualsReflexive() {
    }

    @org.checkerframework.dataflow.qual.Pure
    public static @org.checkerframework.checker.mustcall.qual.MustCall({}) EqualsReflexive getInstance() {
        return instance;
    }

    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.mustcall.qual.MustCall({}) boolean evaluate(@org.checkerframework.checker.mustcall.qual.MustCall({}) EqualsReflexive this, @org.checkerframework.checker.mustcall.qual.MustCall({}) Object@org.checkerframework.checker.mustcall.qual.MustCall({}) ... objects) {
        assert objects != null && objects.length == 1;
        Object o = objects[0];
        assert o != null;
        // noinspection EqualsWithItself
        return o.equals(o);
    }

    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.mustcall.qual.MustCall({}) int getArity(@org.checkerframework.checker.mustcall.qual.MustCall({}) EqualsReflexive this) {
        return 1;
    }

    /**
     * The arguments to which this contract can be applied.
     */
    static @org.checkerframework.checker.mustcall.qual.MustCall({}) TypeTuple inputTypes = new TypeTuple(Arrays.asList(JavaTypes.OBJECT_TYPE));

    @org.checkerframework.dataflow.qual.Pure
    public @org.checkerframework.checker.mustcall.qual.MustCall({}) TypeTuple getInputTypes(@org.checkerframework.checker.mustcall.qual.MustCall({}) EqualsReflexive this) {
        return inputTypes;
    }

    @org.checkerframework.dataflow.qual.Pure
    public @org.checkerframework.checker.mustcall.qual.MustCall({}) String toCommentString(@org.checkerframework.checker.mustcall.qual.MustCall({}) EqualsReflexive this) {
        return "x0.equals(x0)";
    }

    @org.checkerframework.dataflow.qual.Pure
    public @org.checkerframework.checker.mustcall.qual.MustCall({}) String get_observer_str(@org.checkerframework.checker.mustcall.qual.MustCall({}) EqualsReflexive this) {
        return "EqualsReflexive";
    }

    public @org.checkerframework.checker.mustcall.qual.MustCall({}) String toCodeString(@org.checkerframework.checker.mustcall.qual.MustCall({}) EqualsReflexive this) {
        StringBuilder b = new StringBuilder();
        b.append("org.junit.Assert.assertTrue(");
        b.append("\"Contract failed: " + toCommentString() + "\", ");
        b.append("x0.equals(x0)");
        b.append(");");
        return b.toString();
    }
}

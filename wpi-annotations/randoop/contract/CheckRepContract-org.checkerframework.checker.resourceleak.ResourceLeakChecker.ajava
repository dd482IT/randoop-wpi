package randoop.contract;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.util.Objects;
import randoop.Globals;
import randoop.main.RandoopBug;
import randoop.operation.TypedClassOperation;
import randoop.operation.TypedOperation;
import randoop.types.JavaTypes;
import randoop.types.TypeTuple;

/**
 * Represents the contract that an object must conform to its representation invariant, as expressed
 * in a user-supplied representation check method. A rep check method for a class must be declared
 * as a public instance method with no parameters in the given class, annotated with a
 * {@code @CheckRep} annotation, and have return type {@code boolean} or {@code void}. In the first
 * case, a return value {@code true} means the check passed, and {@code false}, or an exception,
 * means it failed. In the second case, normal return means the check passed, and an exception means
 * it failed.
 */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.resourceleak.ResourceLeakChecker")
public final class CheckRepContract extends ObjectContract {

    public final @org.checkerframework.checker.calledmethods.qual.CalledMethods({ "getAnnotation", "getDeclaringClass", "getGenericParameterTypes", "getModifiers", "getParameterTypes", "getReturnType", "toGenericString" }) Method checkRepMethod;

    private final @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) TypedClassOperation operation;

    // derived from checkRepMethod
     @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) boolean returnsBoolean;

    // derived from checkRepMethod
    public final @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) Class<?> declaringClass;

    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) boolean equals(@org.checkerframework.checker.calledmethods.qual.CalledMethods({}) CheckRepContract this, @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) Object o) {
        if (o == this) {
            return true;
        }
        if (!(o instanceof CheckRepContract)) {
            // I collected the results of get_value()
            return false;
        }
        CheckRepContract other = (CheckRepContract) o;
        return checkRepMethod.equals(other.checkRepMethod);
    }

    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) int hashCode(@org.checkerframework.checker.calledmethods.qual.CalledMethods({}) CheckRepContract this) {
        return Objects.hash(checkRepMethod);
    }

    @org.checkerframework.checker.calledmethods.qual.EnsuresCalledMethods(value = { "#1" }, methods = { "getAnnotation", "getDeclaringClass", "getGenericParameterTypes", "getModifiers", "getParameterTypes", "getReturnType", "toGenericString" })
    @org.checkerframework.checker.calledmethods.qual.EnsuresCalledMethods(value = { "this.operation" }, methods = { "getOutputType" })
    public CheckRepContract(@org.checkerframework.checker.calledmethods.qual.CalledMethods({ "getAnnotation", "getModifiers", "getParameterTypes", "getReturnType", "toGenericString" }) Method checkRepMethod) {
        if (checkRepMethod == null) {
            throw new IllegalArgumentException("check-rep method cannot be null.");
        }
        int modifiers = checkRepMethod.getModifiers();
        assert Modifier.isPublic(modifiers);
        assert !Modifier.isStatic(modifiers);
        assert checkRepMethod.getParameterTypes().length == 0;
        this.operation = TypedOperation.forMethod(checkRepMethod);
        if (operation.getOutputType().equals(JavaTypes.BOOLEAN_TYPE)) {
            this.returnsBoolean = true;
        } else if (operation.getOutputType().equals(JavaTypes.VOID_TYPE)) {
            this.returnsBoolean = false;
        } else {
            throw new IllegalArgumentException("check-rep method must have void or boolean return type");
        }
        this.checkRepMethod = checkRepMethod;
        this.declaringClass = checkRepMethod.getDeclaringClass();
    }

    @org.checkerframework.checker.calledmethods.qual.EnsuresCalledMethods(value = { "this.declaringClass" }, methods = { "equals" })
    public  @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) boolean evaluate(@org.checkerframework.checker.calledmethods.qual.CalledMethods({ "getInputTypes" }) CheckRepContract this, @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) Object@org.checkerframework.checker.calledmethods.qual.CalledMethods({}) ... objects) throws Throwable {
        assert objects.length == 1;
        assert objects[0] != null;
        if (declaringClass.equals(objects[0].getClass())) {
            try {
                if (returnsBoolean) {
                    return (Boolean) checkRepMethod.invoke(objects[0]);
                } else {
                    checkRepMethod.invoke(objects[0]);
                    return true;
                }
            } catch (IllegalArgumentException e) {
                // This will never happen.
                throw new RandoopBug(e);
            } catch (IllegalAccessException e) {
                throw new RuntimeException(e);
            } catch (InvocationTargetException e) {
                throw e.getCause();
            }
        }
        return true;
    }

    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) int getArity(@org.checkerframework.checker.calledmethods.qual.CalledMethods({}) CheckRepContract this) {
        return 1;
    }

    @org.checkerframework.checker.calledmethods.qual.EnsuresCalledMethods(value = { "this.operation" }, methods = { "getInputTypes" })
    @org.checkerframework.dataflow.qual.Pure
    public @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) TypeTuple getInputTypes(@org.checkerframework.checker.calledmethods.qual.CalledMethods({}) CheckRepContract this) {
        return operation.getInputTypes();
    }

    @org.checkerframework.checker.calledmethods.qual.EnsuresCalledMethods(value = { "this.checkRepMethod" }, methods = { "getAnnotation", "getDeclaringClass", "getGenericParameterTypes", "getModifiers", "getName", "getParameterTypes", "getReturnType", "toGenericString" })
    public @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) String toCommentString(@org.checkerframework.checker.calledmethods.qual.CalledMethods({}) CheckRepContract this) {
        return "Check rep invariant (method " + checkRepMethod.getName() + ") for x0";
    }

    @org.checkerframework.checker.calledmethods.qual.EnsuresCalledMethods(value = { "this.checkRepMethod" }, methods = { "getAnnotation", "getDeclaringClass", "getGenericParameterTypes", "getModifiers", "getName", "getParameterTypes", "getReturnType", "toGenericString" })
    public @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) String get_observer_str(@org.checkerframework.checker.calledmethods.qual.CalledMethods({}) CheckRepContract this) {
        return "CheckRep " + checkRepMethod.getName();
    }

    @org.checkerframework.checker.calledmethods.qual.EnsuresCalledMethods(value = { "this.checkRepMethod" }, methods = { "getAnnotation", "getDeclaringClass", "getGenericParameterTypes", "getModifiers", "getName", "getParameterTypes", "getReturnType", "toGenericString" })
    public @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) String toCodeString(@org.checkerframework.checker.calledmethods.qual.CalledMethods({}) CheckRepContract this) {
        StringBuilder b = new StringBuilder();
        b.append(Globals.lineSep);
        b.append("// Check representation invariant.").append(Globals.lineSep);
        if (returnsBoolean) {
            b.append("org.junit.Assert.assertTrue(");
            b.append("\"Representation invariant failed: ").append(toCommentString()).append("\", ");
            b.append("x0.").append(checkRepMethod.getName()).append("()");
            b.append(");");
        } else {
            b.append("x0.").append(checkRepMethod.getName()).append("();");
        }
        return b.toString();
    }
}

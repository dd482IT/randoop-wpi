package randoop.contract;

import java.util.Arrays;
import randoop.types.JavaTypes;
import randoop.types.TypeTuple;

/**
 * The contract: Checks the transitivity of the compare to method.
 *
 * <pre>{@code
 * ((x0.compareTo(x1) > 0) && (x1.compareTo(x2) > 0))
 *  => (x0.compareTo(x2) > 0)
 * }</pre>
 */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.signature.SignatureChecker")
public class CompareToTransitive extends ObjectContract {

    private static final @org.checkerframework.checker.signature.qual.SignatureUnknown CompareToTransitive instance = new CompareToTransitive();

    private CompareToTransitive() {
    }

    @org.checkerframework.dataflow.qual.Pure
    public static @org.checkerframework.checker.signature.qual.SignatureUnknown CompareToTransitive getInstance() {
        return instance;
    }

    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.signature.qual.SignatureUnknown boolean evaluate(@org.checkerframework.checker.signature.qual.SignatureUnknown CompareToTransitive this, @org.checkerframework.checker.signature.qual.SignatureUnknown Object@org.checkerframework.checker.signature.qual.SignatureUnknown ... objects) {
        Object o1 = objects[0];
        Object o2 = objects[1];
        Object o3 = objects[2];
        // If o1 and o2 are comparable objects, check the implication
        if (o1 instanceof Comparable && o2 instanceof Comparable) {
            Comparable compObj1 = (Comparable) o1;
            Comparable compObj2 = (Comparable) o2;
            Comparable compObj3 = (Comparable) o3;
            if (compObj1.compareTo(compObj2) > 0 && compObj2.compareTo(compObj3) > 0) {
                return (compObj1.compareTo(compObj3) > 0);
            }
            return true;
        }
        // If the compare to operation can't be done, the statement is trivially true
        return true;
    }

    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.signature.qual.SignatureUnknown int getArity(@org.checkerframework.checker.signature.qual.SignatureUnknown CompareToTransitive this) {
        return 3;
    }

    /**
     * The arguments to which this contract can be applied.
     */
    static @org.checkerframework.checker.signature.qual.SignatureUnknown TypeTuple inputTypes = new TypeTuple(Arrays.asList(JavaTypes.COMPARABLE_TYPE, JavaTypes.COMPARABLE_TYPE, JavaTypes.COMPARABLE_TYPE));

    @org.checkerframework.dataflow.qual.Pure
    public @org.checkerframework.checker.signature.qual.SignatureUnknown TypeTuple getInputTypes(@org.checkerframework.checker.signature.qual.SignatureUnknown CompareToTransitive this) {
        return inputTypes;
    }

    @org.checkerframework.dataflow.qual.Pure
    public @org.checkerframework.checker.signature.qual.SignatureUnknown String toCommentString(@org.checkerframework.checker.signature.qual.SignatureUnknown CompareToTransitive this) {
        return "compareTo-transitive on x0, x1, and x2";
    }

    @org.checkerframework.dataflow.qual.Pure
    public @org.checkerframework.checker.signature.qual.Identifier String get_observer_str(@org.checkerframework.checker.signature.qual.SignatureUnknown CompareToTransitive this) {
        return "CompareToTransitive";
    }

    public @org.checkerframework.checker.signature.qual.SignatureUnknown String toCodeString(@org.checkerframework.checker.signature.qual.SignatureUnknown CompareToTransitive this) {
        StringBuilder b = new StringBuilder();
        b.append("org.junit.Assert.assertTrue(");
        b.append("\"Contract failed: " + toCommentString() + "\", ");
        b.append("!(x0.compareTo(x1)>0 && x1.compareTo(x2)>0) || x0.compareTo(x2)>0");
        b.append(");");
        return b.toString();
    }
}

package randoop.contract;

import java.util.Arrays;
import randoop.types.JavaTypes;
import randoop.types.TypeTuple;

/**
 * The contract: {@code x != null}.
 *
 * <p>Obviously, this is not a property that must hold of all objects in a test. Randoop creates an
 * instance of this contract when, during execution of a sequence, it determines that the above
 * property holds. The property thus represents a <i>regression</i> as it captures the behavior of
 * the code when it is executed.
 */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.common.returnsreceiver.ReturnsReceiverChecker")
public final class IsNotNull extends ObjectContract {

    @org.checkerframework.dataflow.qual.Pure
    public   boolean equals( IsNotNull this,  Object o) {
        if (o == this) {
            return true;
        }
        return o instanceof IsNotNull;
    }

    @org.checkerframework.dataflow.qual.Pure
    public   int hashCode( IsNotNull this) {
        // no state to compare.
        return 31;
    }

    @org.checkerframework.dataflow.qual.Pure
    public   boolean evaluate( IsNotNull this,  Object ... objects) throws Throwable {
        assert objects.length == 1;
        return objects[0] != null;
    }

    @org.checkerframework.dataflow.qual.Pure
    public   int getArity( IsNotNull this) {
        return 1;
    }

    /**
     * The arguments to which this contract can be applied.
     */
    static  TypeTuple inputTypes = new TypeTuple(Arrays.asList(JavaTypes.OBJECT_TYPE));

    @org.checkerframework.dataflow.qual.Pure
    public  TypeTuple getInputTypes( IsNotNull this) {
        return inputTypes;
    }

    public  String toCodeString( IsNotNull this) {
        StringBuilder b = new StringBuilder();
        b.append("org.junit.Assert.assertNotNull(x0);");
        return b.toString();
    }

    @org.checkerframework.dataflow.qual.Pure
    public  String toCommentString( IsNotNull this) {
        return "x0 != null";
    }

    @org.checkerframework.dataflow.qual.Pure
    public  String get_observer_str( IsNotNull this) {
        return "IsNotNull";
    }
}

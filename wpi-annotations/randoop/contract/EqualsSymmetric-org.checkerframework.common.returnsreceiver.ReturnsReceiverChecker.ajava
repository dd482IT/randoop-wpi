package randoop.contract;

import java.util.Arrays;
import randoop.Globals;
import randoop.types.JavaTypes;
import randoop.types.TypeTuple;

/**
 * The contract: {@code o1.equals(o2) ==> o2.equals(o1)}.
 */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.common.returnsreceiver.ReturnsReceiverChecker")
public final class EqualsSymmetric extends ObjectContract {

    private static final  EqualsSymmetric instance = new EqualsSymmetric();

    private EqualsSymmetric() {
    }

    @org.checkerframework.dataflow.qual.Pure
    public static  EqualsSymmetric getInstance() {
        return instance;
    }

    @org.checkerframework.dataflow.qual.Pure
    public   boolean evaluate( EqualsSymmetric this,  Object ... objects) {
        Object o1 = objects[0];
        Object o2 = objects[1];
        return o1.equals(o2) == o2.equals(o1);
    }

    @org.checkerframework.dataflow.qual.Pure
    public   int getArity( EqualsSymmetric this) {
        return 2;
    }

    /**
     * The arguments to which this contract can be applied.
     */
    static  TypeTuple inputTypes = new TypeTuple(Arrays.asList(JavaTypes.OBJECT_TYPE, JavaTypes.OBJECT_TYPE));

    @org.checkerframework.dataflow.qual.Pure
    public  TypeTuple getInputTypes( EqualsSymmetric this) {
        return inputTypes;
    }

    @org.checkerframework.dataflow.qual.Pure
    public  String toCommentString( EqualsSymmetric this) {
        return "equals-symmetric on x0 and x1.";
    }

    @org.checkerframework.dataflow.qual.Pure
    public  String get_observer_str( EqualsSymmetric this) {
        return "equals-symmetric";
    }

    public  String toCodeString( EqualsSymmetric this) {
        StringBuilder b = new StringBuilder();
        b.append(Globals.lineSep);
        b.append("// This assertion (symmetry of equals) fails ");
        b.append(Globals.lineSep);
        b.append("org.junit.Assert.assertTrue(");
        b.append("\"Contract failed: " + toCommentString() + "\", ");
        b.append("x0.equals(x1) == x1.equals(x0)");
        b.append(");");
        return b.toString();
    }
}

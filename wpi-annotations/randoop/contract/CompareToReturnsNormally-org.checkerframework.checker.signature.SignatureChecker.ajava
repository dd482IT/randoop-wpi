package randoop.contract;

import java.util.Arrays;
import randoop.types.JavaTypes;
import randoop.types.TypeTuple;

/**
 * Checks that calling compareTo() on an object does not throw an exception.
 */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.signature.SignatureChecker")
public class CompareToReturnsNormally extends ObjectContract {

    private static final @org.checkerframework.checker.signature.qual.SignatureUnknown CompareToReturnsNormally instance = new CompareToReturnsNormally();

    private CompareToReturnsNormally() {
    }

    @org.checkerframework.dataflow.qual.Pure
    public static @org.checkerframework.checker.signature.qual.SignatureUnknown CompareToReturnsNormally getInstance() {
        return instance;
    }

    @org.checkerframework.dataflow.qual.SideEffectFree
    public  @org.checkerframework.checker.signature.qual.SignatureUnknown boolean evaluate(@org.checkerframework.checker.signature.qual.SignatureUnknown CompareToReturnsNormally this, @org.checkerframework.checker.signature.qual.SignatureUnknown Object@org.checkerframework.checker.signature.qual.SignatureUnknown ... objects) {
        assert objects != null && objects.length == 1;
        Object o = objects[0];
        assert o != null;
        if (o instanceof Comparable) {
            try {
                ((Comparable) o).compareTo(o);
            } catch (Exception e) {
                return false;
            }
        }
        return true;
    }

    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.signature.qual.SignatureUnknown int getArity(@org.checkerframework.checker.signature.qual.SignatureUnknown CompareToReturnsNormally this) {
        return 1;
    }

    /**
     * The arguments to which this contract can be applied.
     */
    static @org.checkerframework.checker.signature.qual.SignatureUnknown TypeTuple inputTypes = new TypeTuple(Arrays.asList(JavaTypes.COMPARABLE_TYPE));

    @org.checkerframework.dataflow.qual.Pure
    public @org.checkerframework.checker.signature.qual.SignatureUnknown TypeTuple getInputTypes(@org.checkerframework.checker.signature.qual.SignatureUnknown CompareToReturnsNormally this) {
        return inputTypes;
    }

    @org.checkerframework.dataflow.qual.Pure
    public @org.checkerframework.checker.signature.qual.SignatureUnknown String toCommentString(@org.checkerframework.checker.signature.qual.SignatureUnknown CompareToReturnsNormally this) {
        return "x0.compareTo() throws no Exception.";
    }

    @org.checkerframework.dataflow.qual.Pure
    public @org.checkerframework.checker.signature.qual.SignatureUnknown String get_observer_str(@org.checkerframework.checker.signature.qual.SignatureUnknown CompareToReturnsNormally this) {
        return "compareTo throws no Exception";
    }

    public @org.checkerframework.checker.signature.qual.SignatureUnknown String toCodeString(@org.checkerframework.checker.signature.qual.SignatureUnknown CompareToReturnsNormally this) {
        StringBuilder b = new StringBuilder();
        b.append("org.junit.Assert.assertTrue(");
        b.append("\"Contract failed: " + toCommentString() + "\", ");
        b.append("x0.compareTo()");
        b.append(");");
        return b.toString();
    }
}

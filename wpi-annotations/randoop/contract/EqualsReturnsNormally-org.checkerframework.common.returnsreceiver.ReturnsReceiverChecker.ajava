package randoop.contract;

import java.util.Arrays;
import randoop.types.JavaTypes;
import randoop.types.TypeTuple;

/**
 * Checks that calling equals() on an object does not throw an exception.
 */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.common.returnsreceiver.ReturnsReceiverChecker")
public final class EqualsReturnsNormally extends ObjectContract {

    private static final  EqualsReturnsNormally instance = new EqualsReturnsNormally();

    private EqualsReturnsNormally() {
    }

    @org.checkerframework.dataflow.qual.Pure
    public static  EqualsReturnsNormally getInstance() {
        return instance;
    }

    @org.checkerframework.dataflow.qual.SideEffectFree
    public   boolean evaluate( EqualsReturnsNormally this,  Object ... objects) {
        assert objects != null && objects.length == 1;
        Object o = objects[0];
        assert o != null;
        try {
            boolean ignore = o.equals(o);
        } catch (Exception e) {
            return false;
        }
        return true;
    }

    @org.checkerframework.dataflow.qual.Pure
    public   int getArity( EqualsReturnsNormally this) {
        return 1;
    }

    /**
     * The arguments to which this contract can be applied.
     */
    static  TypeTuple inputTypes = new TypeTuple(Arrays.asList(JavaTypes.OBJECT_TYPE));

    @org.checkerframework.dataflow.qual.Pure
    public  TypeTuple getInputTypes( EqualsReturnsNormally this) {
        return inputTypes;
    }

    @org.checkerframework.dataflow.qual.Pure
    public  String toCommentString( EqualsReturnsNormally this) {
        return "x0.equals() throws no Exception.";
    }

    @org.checkerframework.dataflow.qual.Pure
    public  String get_observer_str( EqualsReturnsNormally this) {
        return "equals() throws no Exception";
    }

    public  String toCodeString( EqualsReturnsNormally this) {
        StringBuilder b = new StringBuilder();
        b.append("org.junit.Assert.assertTrue(");
        b.append("\"Contract failed: " + toCommentString() + "\", ");
        b.append("x0.equals()");
        b.append(");");
        return b.toString();
    }
}

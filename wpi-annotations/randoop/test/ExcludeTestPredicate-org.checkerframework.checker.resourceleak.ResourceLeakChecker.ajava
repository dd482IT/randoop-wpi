package randoop.test;

import java.util.Set;
import java.util.function.Predicate;
import randoop.sequence.ExecutableSequence;
import randoop.sequence.Sequence;

/**
 * Forbids certain sequences. Returns true if the sequence is not in the exclusion set.
 */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.resourceleak.ResourceLeakChecker")
public class ExcludeTestPredicate implements Predicate<ExecutableSequence> {

    /**
     * The sequences to forbid.
     */
    private @org.checkerframework.checker.calledmethods.qual.CalledMethods({ "add" }) Set<Sequence> excludeSet;

    public ExcludeTestPredicate(@org.checkerframework.checker.calledmethods.qual.CalledMethods({ "add" }) Set<Sequence> excludeSet) {
        this.excludeSet = excludeSet;
    }

    @org.checkerframework.checker.calledmethods.qual.EnsuresCalledMethods(value = { "this.excludeSet" }, methods = { "add", "contains" })
    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) boolean test(@org.checkerframework.checker.calledmethods.qual.CalledMethods({}) ExcludeTestPredicate this, @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) ExecutableSequence eseq) {
        return !excludeSet.contains(eseq.sequence);
    }
}

package randoop.test;

import java.util.Collections;
import java.util.LinkedHashSet;
import java.util.Objects;
import java.util.Set;
import randoop.main.RandoopBug;

/**
 * A set of checks, including at most one ExceptionCheck.
 */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.mustcall.MustCallChecker")
public class RegressionChecks implements TestChecks<RegressionChecks> {

    /**
     * An empty, immutable set of regression checks.
     */
    public static @org.checkerframework.checker.mustcall.qual.MustCall({}) RegressionChecks EMPTY = new RegressionChecks();

    private @org.checkerframework.checker.mustcall.qual.MustCall({}) Set<Check> checks;

    private @org.checkerframework.checker.mustcall.qual.MustCall({}) ExceptionCheck exceptionCheck;

    /**
     * Create an empty set of regression checks.
     */
    public RegressionChecks() {
        this.checks = new LinkedHashSet<>();
        this.exceptionCheck = null;
    }

    /**
     * Create a singleton set of regression checks.
     *
     * @param check the check to put in the newly-created singleton set
     */
    public RegressionChecks(@org.checkerframework.checker.mustcall.qual.MustCall({}) Check check) {
        if (check instanceof ExceptionCheck) {
            this.checks = Collections.emptySet();
            this.exceptionCheck = (ExceptionCheck) check;
        } else {
            this.checks = Collections.singleton(check);
            this.exceptionCheck = null;
        }
    }

    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.mustcall.qual.MustCall({}) int count(@org.checkerframework.checker.mustcall.qual.MustCall({}) RegressionChecks this) {
        int result = checks.size();
        if (exceptionCheck != null) {
            result++;
        }
        return result;
    }

    /**
     * Adds the given check to the sequence.
     *
     * @throws IllegalArgumentException if the argument's class is {@code ExceptionCheck} and this
     *     already contains such a check
     */
    public void add(@org.checkerframework.checker.mustcall.qual.MustCall({}) RegressionChecks this, @org.checkerframework.checker.mustcall.qual.MustCall({}) Check check) {
        if (this == EMPTY) {
            throw new RandoopBug("Don't add to EMPTY");
        }
        if (check instanceof ExceptionCheck) {
            if (exceptionCheck != null) {
                throw new IllegalArgumentException("Sequence already has a check of type " + exceptionCheck.getClass().getCanonicalName());
            }
            exceptionCheck = (ExceptionCheck) check;
        } else {
            checks.add(check);
        }
    }

    /**
     * {@inheritDoc}
     *
     * @return map of non-exception checks in this object. each mapped to true, indicating it is
     *     passing
     */
    @org.checkerframework.dataflow.qual.Pure
    public @org.checkerframework.checker.mustcall.qual.MustCall({}) Set<Check> checks(@org.checkerframework.checker.mustcall.qual.MustCall({}) RegressionChecks this) {
        return checks;
    }

    /**
     * {@inheritDoc}
     *
     * @return true if there are regression checks or an expected exception, false otherwise
     */
    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.mustcall.qual.MustCall({}) boolean hasChecks(@org.checkerframework.checker.mustcall.qual.MustCall({}) RegressionChecks this) {
        return (!checks.isEmpty() || exceptionCheck != null);
    }

    /**
     * {@inheritDoc}
     *
     * @return false, since all regression checks are passing
     */
    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.mustcall.qual.MustCall({}) boolean hasErrorBehavior(@org.checkerframework.checker.mustcall.qual.MustCall({}) RegressionChecks this) {
        return false;
    }

    @org.checkerframework.dataflow.qual.Pure
    public @org.checkerframework.checker.mustcall.qual.MustCall({}) ExceptionCheck getExceptionCheck(@org.checkerframework.checker.mustcall.qual.MustCall({}) RegressionChecks this) {
        return exceptionCheck;
    }

    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.mustcall.qual.MustCall({}) boolean equals(@org.checkerframework.checker.mustcall.qual.MustCall({}) RegressionChecks this, @org.checkerframework.checker.mustcall.qual.MustCall({}) Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof RegressionChecks)) {
            return false;
        }
        RegressionChecks cks = (RegressionChecks) obj;
        if (!checks.equals(cks.checks)) {
            return false;
        }
        if (exceptionCheck == null) {
            return (cks.exceptionCheck == null);
        }
        return cks.exceptionCheck != null && exceptionCheck.equals(cks.exceptionCheck);
    }

    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.mustcall.qual.MustCall({}) int hashCode(@org.checkerframework.checker.mustcall.qual.MustCall({}) RegressionChecks this) {
        return Objects.hash(checks, exceptionCheck);
    }

    public @org.checkerframework.checker.mustcall.qual.MustCall({}) RegressionChecks commonChecks(@org.checkerframework.checker.mustcall.qual.MustCall({}) RegressionChecks this, @org.checkerframework.checker.mustcall.qual.MustCall({}) RegressionChecks other) {
        RegressionChecks common = new RegressionChecks();
        for (Check ck : checks) {
            if (other.checks.contains(ck)) {
                common.add(ck);
            }
        }
        if (exceptionCheck.equals(other.exceptionCheck)) {
            common.add(exceptionCheck);
        }
        return common;
    }

    /**
     * {@inheritDoc}
     *
     * <p>Returns false because regression checks are not invalid.
     *
     * @return false, always
     */
    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.mustcall.qual.MustCall({}) boolean hasInvalidBehavior(@org.checkerframework.checker.mustcall.qual.MustCall({}) RegressionChecks this) {
        return false;
    }
}

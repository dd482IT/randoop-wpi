package randoop.test;

import randoop.sequence.ExecutableSequence;

/**
 * Represents the occurrence of an invalid value for a {@link
 * randoop.condition.ExecutableBooleanExpression} of the {@link randoop.operation.TypedOperation} in
 * a {@link randoop.sequence.Statement}.
 */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.resourceleak.ResourceLeakChecker")
public class InvalidValueCheck implements Check {

    /**
     * The sequence that creates the value to be checked.
     */
    @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) ExecutableSequence eseq;

    /**
     * The index in the sequence of the statement that creates the value.
     */
     @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) int index;

    /**
     * Create an InvalidValueCheck.
     *
     * @param eseq the sequence that creates the value to be checked
     * @param index the index in the sequence of the statement that creates the value to be checked
     */
    public InvalidValueCheck(@org.checkerframework.checker.calledmethods.qual.CalledMethods({}) ExecutableSequence eseq,  @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) int index) {
        this.eseq = eseq;
        this.index = index;
    }

    @org.checkerframework.dataflow.qual.Pure
    public @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) String toCodeStringPreStatement(@org.checkerframework.checker.calledmethods.qual.CalledMethods({}) InvalidValueCheck this) {
        return "";
    }

    @org.checkerframework.dataflow.qual.Pure
    public @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) String toCodeStringPostStatement(@org.checkerframework.checker.calledmethods.qual.CalledMethods({ "toCodeStringPreStatement" }) InvalidValueCheck this) {
        return "";
    }
}

package randoop.test;

import java.util.function.Predicate;
import randoop.sequence.ExecutableSequence;
import randoop.sequence.Value;

/**
 * Returns true if the sequence returns a value that is NOT too large value.
 */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.mustcall.MustCallChecker")
public class ValueSizePredicate implements Predicate<ExecutableSequence> {

    /**
     * Creates a ValueSizePredicate.
     */
    @org.checkerframework.dataflow.qual.SideEffectFree
    public ValueSizePredicate() {
    }

    public  @org.checkerframework.checker.mustcall.qual.MustCall({}) boolean test(@org.checkerframework.checker.mustcall.qual.MustCall({}) ValueSizePredicate this, @org.checkerframework.checker.mustcall.qual.MustCall({}) ExecutableSequence eseq) {
        return Value.lastValueSizeOk(eseq);
    }
}

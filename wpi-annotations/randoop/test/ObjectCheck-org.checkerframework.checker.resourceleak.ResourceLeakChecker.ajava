package randoop.test;

import java.util.Arrays;
import java.util.Objects;
import org.plumelib.util.StringsPlume;
import randoop.contract.ObjectContract;
import randoop.contract.ObjectContractUtils;
import randoop.main.RandoopBug;
import randoop.sequence.Sequence;
import randoop.sequence.Variable;

/**
 * A check that checks for expected properties of one or more objects generated during the execution
 * of a {@link Sequence}, for example:
 *
 * <ul>
 *   <li>Checking that the objects created during execution of a sequence respect reflexivity,
 *       transitivity and symmetry of equality.
 *   <li>Checking that calling {@code toString()} on the objects created during execution of a
 *       sequence does not throw an exception.
 * </ul>
 *
 * <p>An {@code ObjectCheck} has two parts:
 *
 * <ul>
 *   <li>A {@link randoop.contract.ObjectContract} responsible for performing the actual check on a
 *       set of runtime values. For example. the class {@link randoop.contract.EqualsReflexive} is a
 *       checker code class that, given an object <i>o</i>, calls <i>o.equals(o)</i> and checks that
 *       it returns {@code true}.
 *   <li>A list of {@link Variable}s, which describe the specific objects in the sequence that the
 *       check is over.
 * </ul>
 */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.resourceleak.ResourceLeakChecker")
public class ObjectCheck implements Check {

    /**
     * The contract that is checked.
     */
    private final @org.checkerframework.checker.calledmethods.qual.CalledMethods({ "getArity" }) ObjectContract contract;

    /**
     * The variables for the contract.
     */
    private final @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) Variable @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) [] vars;

    // /** Where this was created, for debugging. */
    // private final Throwable stackTrace;
    /**
     * Creates an {@link ObjectCheck} for the given contract using the variables as input.
     *
     * @param contract the contract to check
     * @param vars the input variables for the created check
     */
    @org.checkerframework.checker.calledmethods.qual.EnsuresCalledMethods(value = { "#1" }, methods = { "getArity" })
    public ObjectCheck(@org.checkerframework.checker.calledmethods.qual.CalledMethods({}) ObjectContract contract, @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) Variable@org.checkerframework.checker.calledmethods.qual.CalledMethods({}) ... vars) {
        if (contract == null) {
            throw new IllegalArgumentException("first argument cannot be null.");
        }
        if (vars.length != contract.getArity()) {
            throw new IllegalArgumentException("vars.size() != template.getArity().");
        }
        this.contract = contract;
        this.vars = new Variable[vars.length];
        int count = 0;
        for (Variable v : vars) {
            this.vars[count++] = v;
        }
        // this.stackTrace = new Error();
    }

    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) boolean equals(@org.checkerframework.checker.calledmethods.qual.CalledMethods({}) ObjectCheck this, @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) Object o) {
        if (o == this) {
            return true;
        }
        if (!(o instanceof ObjectCheck)) {
            return false;
        }
        ObjectCheck other = (ObjectCheck) o;
        return contract.equals(other.contract) && Arrays.equals(vars, other.vars);
    }

    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) int hashCode(@org.checkerframework.checker.calledmethods.qual.CalledMethods({}) ObjectCheck this) {
        return Objects.hash(contract, Arrays.hashCode(vars));
    }

    @org.checkerframework.checker.calledmethods.qual.EnsuresCalledMethods(value = { "this.contract" }, methods = { "getArity", "toString" })
    @org.checkerframework.dataflow.qual.SideEffectFree
    public @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) String toString(@org.checkerframework.checker.calledmethods.qual.CalledMethods({}) ObjectCheck this) {
        return "<check: " + contract.toString() + " " + StringsPlume.escapeJava(Arrays.toString(vars)) + ">";
    }

    @org.checkerframework.dataflow.qual.Pure
    public @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) String toCodeStringPreStatement(@org.checkerframework.checker.calledmethods.qual.CalledMethods({}) ObjectCheck this) {
        return "";
    }

    @org.checkerframework.checker.calledmethods.qual.EnsuresCalledMethods(value = { "this.contract" }, methods = { "getArity", "toCodeString" })
    public @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) String toCodeStringPostStatement(@org.checkerframework.checker.calledmethods.qual.CalledMethods({ "toCodeStringPreStatement" }) ObjectCheck this) {
        try {
            return ObjectContractUtils.localizeContractCode(contract.toCodeString(), vars);
        } catch (Exception e) {
            throw new RandoopBug("Problem with ObjectCheck " + this, // + System.format(
            //     "%ncreated at:%n%send of creation stack trace",
            //     org.plumelib.util.UtilPlume.stackTraceToString(stackTrace))
            e);
        }
    }
}

package randoop.mock.javax.swing;

/**
 * Class of mock methods for {@code javax.swing.JComponent}.
 *
 * <p>Default replacement for {@link randoop.instrument.ReplaceCallAgent}. Replacement should be
 * specified in {@code "resources/default-replacements.txt"}
 */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.resourceleak.ResourceLeakChecker")
public class JComponent {

    @org.checkerframework.dataflow.qual.Pure
    public static void setVisible(javax.swing.JComponent component, boolean visible) {
        // do nothing
    }

    @org.checkerframework.dataflow.qual.Pure
    public static void show(javax.swing.JComponent component, boolean visible) {
    }

    @org.checkerframework.dataflow.qual.Pure
    public static void show(javax.swing.JComponent component) {
    }

    /**
     * Mock of method {@code javax.swing.JComponent.requestFocus()} to prevent component getting
     * focus.
     *
     * @param component the component that should not receive focus
     */
    @org.checkerframework.checker.calledmethods.qual.EnsuresCalledMethods(value = { "#1" }, methods = { "setFocusable" })
    public static void requestFocus(javax.swing.JComponent component) {
        component.setFocusable(false);
    }

    /**
     * Mock of method {@code javax.swing.JComponent.requestFocus()} to prevent component getting
     * focus.
     *
     * @param component the component that should not receive focus
     * @param temporary flag that indicates that focus should be temporary (ignored)
     */
    @org.checkerframework.checker.calledmethods.qual.EnsuresCalledMethods(value = { "#1" }, methods = { "setFocusable" })
    public static void requestFocus(javax.swing.JComponent component, boolean temporary) {
        component.setFocusable(false);
    }
}

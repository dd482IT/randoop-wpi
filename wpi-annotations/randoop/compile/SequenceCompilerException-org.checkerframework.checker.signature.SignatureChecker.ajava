package randoop.compile;

import javax.tools.DiagnosticCollector;
import javax.tools.JavaFileObject;

/**
 * Exception for compilation of Java classes given as {@code String}.
 */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.signature.SignatureChecker")
public class SequenceCompilerException extends Throwable {

    private static final  @org.checkerframework.checker.signature.qual.SignatureUnknown long serialVersionUID = -1901576275093767250L;

    /**
     * The source text for the class.
     */
    private final @org.checkerframework.checker.signature.qual.SignatureUnknown String sourceText;

    /**
     * The compiler diagnostics.
     */
    private final @org.checkerframework.checker.signature.qual.SignatureUnknown DiagnosticCollector<JavaFileObject> diagnostics;

    /**
     * Creates a {@link SequenceCompilerException} with a message, source text and compiler
     * diagnostics.
     *
     * @param message the exception message
     * @param sourceText the source text for the compiled class
     * @param diagnostics the compiler diagnostics
     */
    SequenceCompilerException(@org.checkerframework.checker.signature.qual.SignatureUnknown String message, @org.checkerframework.checker.signature.qual.SignatureUnknown String sourceText, @org.checkerframework.checker.signature.qual.SignatureUnknown DiagnosticCollector<JavaFileObject> diagnostics) {
        super(message);
        this.sourceText = sourceText;
        this.diagnostics = diagnostics;
    }

    /**
     * Creates a {@link SequenceCompilerException} with a message, a compiler thrown exception, the
     * source text and compiler diagnostics.
     *
     * @param message the exception message
     * @param cause the compiler exception
     * @param sourceText the source text for the compiled class
     * @param diagnostics the compiler diagnostics
     */
    SequenceCompilerException(String message, Throwable cause, String sourceText, DiagnosticCollector<JavaFileObject> diagnostics) {
        super(message, cause);
        this.sourceText = sourceText;
        this.diagnostics = diagnostics;
    }

    /**
     * Get the source text for the class being compiled when this exception was thrown.
     *
     * @return the source text for the class that was being compiled
     */
    @org.checkerframework.dataflow.qual.Pure
    public @org.checkerframework.checker.signature.qual.SignatureUnknown String getSourceText() {
        return sourceText;
    }

    /**
     * Return the compiler diagnostics.
     *
     * @return the compiler diagnostics
     */
    @org.checkerframework.dataflow.qual.Pure
    public @org.checkerframework.checker.signature.qual.SignatureUnknown DiagnosticCollector<JavaFileObject> getDiagnostics(@org.checkerframework.checker.signature.qual.SignatureUnknown SequenceCompilerException this) {
        return diagnostics;
    }
}

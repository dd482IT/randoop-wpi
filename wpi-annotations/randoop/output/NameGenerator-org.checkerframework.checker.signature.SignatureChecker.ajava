package randoop.output;

import org.checkerframework.checker.signature.qual.Identifier;

/**
 * A NameGenerator generates a sequence of names as strings in the form "prefix"+i for integer i.
 * Pads the counter with zeros to ensure a minimum number of digits determined by field digits.
 */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.signature.SignatureChecker")
public class NameGenerator {

    /**
     * The number to use for the next name to generate.
     */
    private  @org.checkerframework.checker.signature.qual.SignatureUnknown int counter;

    /**
     * The format string to generate a name; takes one integer parameter.
     */
    private @org.checkerframework.checker.signature.qual.SignatureUnknown String format;

    /**
     * Creates an instance that generates names beginning with prefix, counts starting at the
     * initialValue, and 0-padded to enough digits for {@code lastValue}.
     *
     * @param prefix a string to be used as the prefix for all generated names
     * @param initialValue integer starting value for name counter
     * @param lastValue the last expected number, to determine 0-padding; 0 for no padding
     */
    public NameGenerator(@org.checkerframework.checker.signature.qual.SignatureUnknown String prefix,  @org.checkerframework.checker.signature.qual.SignatureUnknown int initialValue,  @org.checkerframework.checker.signature.qual.SignatureUnknown int lastValue) {
        this.counter = initialValue;
        this.format = prefix + "%" + (lastValue == 0 ? "" : ("0" + ((int) (Math.log10(lastValue) + 1)))) + "d";
    }

    /**
     * Generates names without 0-padding on counter.
     *
     * @param prefix is a string to be used as a prefix for all names generated
     */
    public NameGenerator(@org.checkerframework.checker.signature.qual.Identifier String prefix) {
        this(prefix, 0, 0);
    }

    /**
     * Return a new gensym (unique identifier).
     *
     * @return the next identifier in the sequence produced by this
     */
    public @org.checkerframework.checker.signature.qual.Identifier String next(@org.checkerframework.checker.signature.qual.SignatureUnknown NameGenerator this) {
        String name = String.format(format, counter);
        counter++;
        return name;
    }
}

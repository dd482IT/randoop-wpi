package randoop.operation;

import java.lang.reflect.Array;
import java.util.List;
import randoop.ExceptionalExecution;
import randoop.ExecutionOutcome;
import randoop.NormalExecution;
import randoop.sequence.Variable;
import randoop.types.Type;
import randoop.types.TypeTuple;

/**
 * Created by bjkeller on 8/19/16.
 */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.resourceleak.ResourceLeakChecker")
class ArrayElementSet extends CallableOperation {

    private final  @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) int ARRAY = 0;

    private final  @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) int INDEX = 1;

    private final  @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) int VALUE = 2;

    private final @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) Type elementType;

    ArrayElementSet(@org.checkerframework.checker.calledmethods.qual.CalledMethods({}) Type elementType) {
        this.elementType = elementType;
    }

    public @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) ExecutionOutcome execute(@org.checkerframework.checker.calledmethods.qual.CalledMethods({}) ArrayElementSet this, @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) Object @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) [] input) {
        assert input.length == 3 : "array element assignment must have array, index and value as arguments";
        Object array = input[ARRAY];
        int index = (int) input[INDEX];
        Object value = input[VALUE];
        try {
            Array.set(array, index, value);
        } catch (Throwable thrown) {
            return new ExceptionalExecution(thrown, 0);
        }
        return new NormalExecution(null, 0);
    }

    @org.checkerframework.checker.calledmethods.qual.EnsuresCalledMethods(value = { "#4" }, methods = { "get" })
    @org.checkerframework.checker.calledmethods.qual.EnsuresCalledMethods(value = { "#5" }, methods = { "append" })
    @org.checkerframework.checker.calledmethods.qual.EnsuresCalledMethods(value = { "this" }, methods = { "getArgumentString" })
    public void appendCode(@org.checkerframework.checker.calledmethods.qual.CalledMethods({}) ArrayElementSet this, @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) Type declaringType, @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) TypeTuple inputTypes, @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) Type outputType, @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) List<Variable> inputVars, @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) StringBuilder b) {
        b.append(inputVars.get(ARRAY).getName()).append("[");
        Variable indexVariable = inputVars.get(INDEX);
        String index = getArgumentString(indexVariable);
        b.append(index).append("]").append(" = ");
        String value = getArgumentString(inputVars.get(VALUE));
        b.append(value);
    }

    @org.checkerframework.checker.calledmethods.qual.EnsuresCalledMethods(value = { "this" }, methods = { "getName" })
    @org.checkerframework.dataflow.qual.Pure
    public @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) String toParsableString(@org.checkerframework.checker.calledmethods.qual.CalledMethods({}) ArrayElementSet this, @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) Type declaringType, @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) TypeTuple inputTypes, @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) Type outputType) {
        return getName();
    }

    @org.checkerframework.dataflow.qual.Pure
    public @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) String getName(@org.checkerframework.checker.calledmethods.qual.CalledMethods({}) ArrayElementSet this) {
        return "<set>" + elementType + "[]";
    }
}

package randoop.operation;

import java.lang.reflect.Array;
import java.util.List;
import randoop.ExecutionOutcome;
import randoop.NormalExecution;
import randoop.sequence.Variable;
import randoop.types.ArrayType;
import randoop.types.Type;
import randoop.types.TypeTuple;

/**
 * Represents an array creation using reflection, and corresponds to the code {@code
 * (List<String>[])(Array.newInstance(componentType, length)); }
 */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.resourceleak.ResourceLeakChecker")
public class ReflectionArrayCreation extends CallableOperation {

    private final @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) Type elementType;

    private final  @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) int length;

    @org.checkerframework.checker.calledmethods.qual.EnsuresCalledMethods(value = { "#1" }, methods = { "getComponentType" })
    public ReflectionArrayCreation(ArrayType arrayType, int length) {
        this.elementType = arrayType.getComponentType();
        this.length = length;
    }

    @org.checkerframework.checker.calledmethods.qual.EnsuresCalledMethods(value = { "this.elementType" }, methods = { "getRuntimeClass" })
    public @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) ExecutionOutcome execute(@org.checkerframework.checker.calledmethods.qual.CalledMethods({}) ReflectionArrayCreation this, @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) Object @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) [] input) {
        long startTime = System.currentTimeMillis();
        assert input.length == 0;
        Object arrayObject = Array.newInstance(this.elementType.getRuntimeClass(), this.length);
        long totalTime = System.currentTimeMillis() - startTime;
        return new NormalExecution(arrayObject, totalTime);
    }

    @org.checkerframework.checker.calledmethods.qual.EnsuresCalledMethods(value = { "this.elementType" }, methods = { "getBinaryName" })
    @org.checkerframework.dataflow.qual.Pure
    public @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) String toString(@org.checkerframework.checker.calledmethods.qual.CalledMethods({}) ReflectionArrayCreation this) {
        return "Array.newInstance(" + elementType.getBinaryName() + ", " + length + ")";
    }

    @org.checkerframework.checker.calledmethods.qual.EnsuresCalledMethods(value = { "#5" }, methods = { "append" })
    @org.checkerframework.checker.calledmethods.qual.EnsuresCalledMethods(value = { "this.elementType" }, methods = { "getCanonicalName", "getRuntimeClass" })
    public void appendCode(@org.checkerframework.checker.calledmethods.qual.CalledMethods({}) ReflectionArrayCreation this, @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) Type declaringType, @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) TypeTuple inputTypes, @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) Type outputType, @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) List<Variable> inputVars, @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) StringBuilder b) {
        b.append("Array.newInstance(").append(elementType.getCanonicalName()).append(", ").append(length).append(")");
    }

    @org.checkerframework.dataflow.qual.Pure
    public String toParsableString(@org.checkerframework.checker.calledmethods.qual.CalledMethods({}) ReflectionArrayCreation this, @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) Type declaringType, @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) TypeTuple inputTypes, @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) Type outputType) {
        return null;
    }

    @org.checkerframework.checker.calledmethods.qual.EnsuresCalledMethods(value = { "this" }, methods = { "toString" })
    @org.checkerframework.checker.calledmethods.qual.EnsuresCalledMethods(value = { "this.elementType" }, methods = { "getBinaryName" })
    @org.checkerframework.dataflow.qual.Pure
    public @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) String getName(@org.checkerframework.checker.calledmethods.qual.CalledMethods({}) ReflectionArrayCreation this) {
        return this.toString();
    }
}

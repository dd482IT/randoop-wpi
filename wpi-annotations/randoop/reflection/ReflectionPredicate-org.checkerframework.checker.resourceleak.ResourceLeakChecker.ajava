package randoop.reflection;

import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Method;

/**
 * Methods that indicate whether a class, method, constructor, or field should be used in Randoop's
 * exploration.
 */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.resourceleak.ResourceLeakChecker")
public interface ReflectionPredicate {

    /**
     * Indicate whether Randoop should use a class.
     *
     * @param c the class to test
     * @return true if the class meets the predicate criteria, false otherwise
     */
    @org.checkerframework.dataflow.qual.Pure
     @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) boolean test(@org.checkerframework.checker.calledmethods.qual.CalledMethods({}) ReflectionPredicate this, @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) Class<?> c);

    /**
     * Indicate whether Randoop should use a method.
     *
     * @param m the method to test
     * @return true if the method meets the predicate criteria, false otherwise
     */
    @org.checkerframework.dataflow.qual.Pure
     @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) boolean test(@org.checkerframework.checker.calledmethods.qual.CalledMethods({}) ReflectionPredicate this, @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) Method m);

    /**
     * Indicate whether Randoop should use a constructor.
     *
     * @param m the constructor to test
     * @return true if the constructor meets the predicate criteria, false otherwise
     */
    @org.checkerframework.dataflow.qual.Pure
     @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) boolean test(@org.checkerframework.checker.calledmethods.qual.CalledMethods({}) ReflectionPredicate this, @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) Constructor<?> m);

    /**
     * Indicate whether Randoop should use a field.
     *
     * @param f the field to test
     * @return true if the field meets the predicate criteria, false otherwise
     */
    @org.checkerframework.dataflow.qual.Pure
     @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) boolean test(@org.checkerframework.checker.calledmethods.qual.CalledMethods({}) ReflectionPredicate this, @org.checkerframework.checker.calledmethods.qual.CalledMethods({ "getName" }) Field f);
}

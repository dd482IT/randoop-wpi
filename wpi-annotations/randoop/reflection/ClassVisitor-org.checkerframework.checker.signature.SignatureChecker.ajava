package randoop.reflection;

import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Method;

/**
 * ClassVisitor defines the interface for a visitor class that uses reflection to collect
 * information about a class and its members.
 *
 * <p>Note: if the visitor maintains state relative to {@link #visitBefore(Class)} and other methods
 * that could be disrupted by visiting member classes (currently just enums), then a stack should be
 * used to maintain whatever state needs to be remembered. For instance, {@link OperationExtractor}
 * maintains the declaring class type for visited members, and when inner enums are visited the
 * declaring class needs to be remembered and restored by {@link #visitAfter(Class)}.
 *
 * @see ReflectionManager
 * @see OperationExtractor
 */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.signature.SignatureChecker")
public interface ClassVisitor {

    /**
     * Perform action on member class.
     *
     * <p>The {@link ReflectionManager} is needed to allow visitors to initiate recursive visits if
     * needed.
     *
     * @param c the member class
     * @param reflectionManager the {@link ReflectionManager} that called this visitor
     */
    @org.checkerframework.dataflow.qual.Pure
    void visit(@org.checkerframework.checker.signature.qual.SignatureUnknown ClassVisitor this, @org.checkerframework.checker.signature.qual.SignatureUnknown Class<?> c, @org.checkerframework.checker.signature.qual.SignatureUnknown ReflectionManager reflectionManager);

    /**
     * Perform action on a constructor.
     *
     * @param c the constructor
     */
    @org.checkerframework.dataflow.qual.Pure
    void visit(@org.checkerframework.checker.signature.qual.SignatureUnknown ClassVisitor this, @org.checkerframework.checker.signature.qual.SignatureUnknown Constructor<?> c);

    /**
     * Perform an action on a method.
     *
     * @param m the method
     */
    @org.checkerframework.dataflow.qual.Pure
    void visit(@org.checkerframework.checker.signature.qual.SignatureUnknown ClassVisitor this, @org.checkerframework.checker.signature.qual.SignatureUnknown Method m);

    /**
     * Perform an action on a field.
     *
     * @param f the field
     */
    @org.checkerframework.dataflow.qual.Pure
    void visit(@org.checkerframework.checker.signature.qual.SignatureUnknown ClassVisitor this, @org.checkerframework.checker.signature.qual.SignatureUnknown Field f);

    /**
     * Perform an action on an enum value.
     *
     * @param e the enum value
     */
    @org.checkerframework.dataflow.qual.Pure
    void visit(@org.checkerframework.checker.signature.qual.SignatureUnknown ClassVisitor this, @org.checkerframework.checker.signature.qual.SignatureUnknown Enum<?> e);

    /**
     * Perform an action on a class. Occurs before other visit methods are called.
     *
     * @param c the class to visit
     */
    @org.checkerframework.dataflow.qual.Pure
    void visitBefore(@org.checkerframework.checker.signature.qual.SignatureUnknown ClassVisitor this, @org.checkerframework.checker.signature.qual.SignatureUnknown Class<?> c);

    /**
     * Perform an action on a class. Called after other visit methods are called.
     *
     * @param c the class to visit
     */
    @org.checkerframework.dataflow.qual.Pure
    void visitAfter(@org.checkerframework.checker.signature.qual.SignatureUnknown ClassVisitor this, @org.checkerframework.checker.signature.qual.SignatureUnknown Class<?> c);
}

package randoop.reflection;

import java.util.LinkedHashSet;
import java.util.Set;
import randoop.types.ClassOrInterfaceType;

/**
 * A {@link ClassVisitor} that simply collects {@link ClassOrInterfaceType} objects for visited
 * {@link Class} objects.
 */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.mustcall.MustCallChecker")
public class DeclarationExtractor extends DefaultClassVisitor {

    private final @org.checkerframework.checker.mustcall.qual.MustCall({}) Set<ClassOrInterfaceType> classDeclarationTypes;

    private @org.checkerframework.checker.mustcall.qual.MustCall({}) ReflectionPredicate reflectionPredicate;

    public DeclarationExtractor(@org.checkerframework.checker.mustcall.qual.MustCall({}) Set<ClassOrInterfaceType> classDeclarationTypes, @org.checkerframework.checker.mustcall.qual.MustCall({}) ReflectionPredicate reflectionPredicate) {
        this.classDeclarationTypes = classDeclarationTypes;
        this.reflectionPredicate = reflectionPredicate;
    }

    public void visit(@org.checkerframework.checker.mustcall.qual.MustCall({}) DeclarationExtractor this, @org.checkerframework.checker.mustcall.qual.MustCall({}) Class<?> c, @org.checkerframework.checker.mustcall.qual.MustCall({}) ReflectionManager reflectionManager) {
        if (!reflectionPredicate.test(c)) {
            return;
        }
        classDeclarationTypes.add(ClassOrInterfaceType.forClass(c));
        reflectionManager.apply(this, c);
    }

    public void visitBefore(@org.checkerframework.checker.mustcall.qual.MustCall({}) DeclarationExtractor this, @org.checkerframework.checker.mustcall.qual.MustCall({}) Class<?> c) {
        if (!reflectionPredicate.test(c)) {
            return;
        }
        classDeclarationTypes.add(ClassOrInterfaceType.forClass(c));
    }

    /**
     * Return the classes.
     *
     * @param c the class
     * @param reflectionPredicate the reflection predicate
     * @param accessibilityPredicate the accessibility predicate
     * @return the classes that result from running a visitor
     */
    public static @org.checkerframework.checker.mustcall.qual.MustCall({}) Set<ClassOrInterfaceType> classTypes(Class<?> c, ReflectionPredicate reflectionPredicate, AccessibilityPredicate accessibilityPredicate) {
        ReflectionManager typeManager = new ReflectionManager(accessibilityPredicate);
        Set<ClassOrInterfaceType> result = new LinkedHashSet<>();
        typeManager.apply(new DeclarationExtractor(result, reflectionPredicate), c);
        return result;
    }
}

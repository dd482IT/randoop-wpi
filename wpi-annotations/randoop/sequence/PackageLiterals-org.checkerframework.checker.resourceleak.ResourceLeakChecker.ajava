package randoop.sequence;

/**
 * For a given package P, PackageLiterals maps P (if present) to a collection of literals
 * (represented as single-element sequences) that can be used as inputs to classes in the given
 * package.
 */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.resourceleak.ResourceLeakChecker")
public class PackageLiterals extends MappedSequences<Package> {

    @org.checkerframework.checker.calledmethods.qual.EnsuresCalledMethods(value = { "#2" }, methods = { "getTypesForLastStatement", "getVariablesOfLastStatement", "isNonreceiver", "size" })
    @org.checkerframework.checker.calledmethods.qual.EnsuresCalledMethods(value = { "this" }, methods = { "addSequence" })
    public void addSequence(@org.checkerframework.checker.calledmethods.qual.CalledMethods({}) PackageLiterals this, @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) Package key, @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) Sequence seq) {
        if (seq == null)
            throw new IllegalArgumentException("seq is null");
        if (!seq.isNonreceiver()) {
            throw new IllegalArgumentException("seq is not a primitive sequence");
        }
        super.addSequence(key, seq);
    }
}

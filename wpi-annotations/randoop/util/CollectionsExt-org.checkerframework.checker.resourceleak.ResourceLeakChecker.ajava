package randoop.util;

import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import org.plumelib.util.CollectionsPlume;
import org.plumelib.util.StringsPlume;
import randoop.Globals;

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.resourceleak.ResourceLeakChecker")
public final class CollectionsExt {

    @org.checkerframework.dataflow.qual.SideEffectFree
    private CollectionsExt() {
        throw new IllegalStateException("no instances");
    }

    @org.checkerframework.checker.calledmethods.qual.EnsuresCalledMethods(value = { "#1" }, methods = { "isEmpty", "iterator", "size" })
    static <T> T getNthIteratedElement(Collection<? extends T> s, int index) {
        if (s == null)
            throw new IllegalArgumentException("s cannot be null.");
        if (s.isEmpty())
            throw new IllegalArgumentException("s cannot be empty.");
        if (index >= s.size()) {
            throw new IllegalArgumentException("Index " + index + " out of bounds for set of size " + s.size());
        }
        return getNthIteratedElement(s.iterator(), index);
    }

    @org.checkerframework.checker.calledmethods.qual.EnsuresCalledMethods(value = { "#1" }, methods = { "hasNext", "next" })
    private static <T> T getNthIteratedElement(@org.checkerframework.checker.calledmethods.qual.CalledMethods({}) Iterator<? extends T> iter,  @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) int index) {
        if (index < 0)
            throw new IllegalArgumentException("Index " + index + " out of bounds");
        int counter = 0;
        while (iter.hasNext()) {
            if (counter == index) {
                return iter.next();
            }
            iter.next();
            counter++;
        }
        throw new IllegalArgumentException("index " + index + " out of bounds, size=" + counter);
    }

    /**
     * Returns the String.valueOf() of all elements of the collection, one on each line.
     *
     * @param c the collection of objects to include in string
     * @return the concatenated string of object strings as lines
     */
    @org.checkerframework.checker.calledmethods.qual.EnsuresCalledMethods(value = { "#1" }, methods = { "isEmpty" })
    static @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) String toStringInLines(Collection<?> c) {
        if (c.isEmpty()) {
            return "";
        }
        return StringsPlume.joinLines(toStringLines(c)) + Globals.lineSep;
    }

    /**
     * List of String.valueOf() of all elements of the collection.
     *
     * @param c the collection of objects to include in string
     * @return the concatenated string of object strings
     */
    private static @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) List<String> toStringLines(@org.checkerframework.checker.calledmethods.qual.CalledMethods({ "isEmpty" }) Collection<?> c) {
        return CollectionsPlume.mapList(String::valueOf, c);
    }
}

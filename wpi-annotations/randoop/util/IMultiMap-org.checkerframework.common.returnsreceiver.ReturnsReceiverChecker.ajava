package randoop.util;

import java.util.Set;

/**
 * A multimap, which maps each key to a set of values.
 */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.common.returnsreceiver.ReturnsReceiverChecker")
public interface IMultiMap<K, V> {

    /**
     * Precondition: the mapping key&rarr;value is not already in the map.
     *
     * @param key cannot be null
     * @param value cannot be null
     * @return true if the call modifies this object
     */
    @org.checkerframework.dataflow.qual.Pure
      boolean add( IMultiMap<K, V> this, K key, V value);

    /**
     * Precondition: the mapping key&rarr;value is in the map.
     *
     * @param key cannot be null
     * @param value cannot be null
     * @return true if the call modifies this object
     */
    @org.checkerframework.dataflow.qual.Pure
      boolean remove(K key, V value);

    /**
     * Returns the values that the given key maps to.
     *
     * @param key cannot be null
     * @return the set of values for the given key
     */
    @org.checkerframework.dataflow.qual.Pure
     Set<V> getValues( IMultiMap<K, V> this, K key);

    /**
     * Returns the set of keys in this map (the domain).
     *
     * @return the set of keys in this map
     */
    @org.checkerframework.dataflow.qual.Pure
     Set<K> keySet( IMultiMap<K, V> this);

    /**
     * Returns the size of this map: the number of mappings.
     *
     * @return the number of entries in this map
     */
    @org.checkerframework.dataflow.qual.Pure
      int size();

    /**
     * Returns a String representation of this map.
     *
     * @return a String representation of this map
     */
    @org.checkerframework.dataflow.qual.Pure
     String toString();
}

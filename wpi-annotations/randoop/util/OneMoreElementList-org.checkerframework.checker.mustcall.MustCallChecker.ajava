package randoop.util;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.mustcall.MustCallChecker")
public final class OneMoreElementList<E> implements SimpleList<E>, Serializable {

    private static final  @org.checkerframework.checker.mustcall.qual.MustCall({}) long serialVersionUID = 1332963552183905833L;

    /**
     * The last element in this.
     */
    public final @org.checkerframework.checker.mustcall.qual.MustCall({}) E lastElement;

    /**
     * All but the last element in this.
     */
    public final @org.checkerframework.checker.mustcall.qual.MustCall({}) SimpleList<E> list;

    /**
     * The size of this.
     */
    public final  @org.checkerframework.checker.mustcall.qual.MustCall({}) int size;

    public OneMoreElementList(@org.checkerframework.checker.mustcall.qual.MustCall({}) SimpleList<E> list, E extraElement) {
        this.list = list;
        this.lastElement = extraElement;
        this.size = list.size() + 1;
    }

    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.mustcall.qual.MustCall({}) int size(@org.checkerframework.checker.mustcall.qual.MustCall({}) OneMoreElementList<E> this) {
        return size;
    }

    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.mustcall.qual.MustCall({}) boolean isEmpty(@org.checkerframework.checker.mustcall.qual.MustCall({}) OneMoreElementList<E> this) {
        return size == 0;
    }

    @org.checkerframework.dataflow.qual.Pure
    public E get(@org.checkerframework.checker.mustcall.qual.MustCall({}) OneMoreElementList<E> this,  @org.checkerframework.checker.mustcall.qual.MustCall({}) int index) {
        if (index < size - 1) {
            return list.get(index);
        }
        if (index == size - 1) {
            return lastElement;
        }
        throw new IndexOutOfBoundsException("No such element: " + index);
    }

    @org.checkerframework.dataflow.qual.Pure
    public @org.checkerframework.checker.mustcall.qual.MustCall({}) SimpleList<E> getSublist(@org.checkerframework.checker.mustcall.qual.MustCall({}) OneMoreElementList<E> this,  @org.checkerframework.checker.mustcall.qual.MustCall({}) int index) {
        if (index == size - 1) {
            // is lastElement
            return this;
        }
        // Not the last element, so recurse.
        if (index < size - 1) {
            return list.getSublist(index);
        }
        throw new IndexOutOfBoundsException("No such index: " + index);
    }

    public @org.checkerframework.checker.mustcall.qual.MustCall({}) List<E> toJDKList(@org.checkerframework.checker.mustcall.qual.MustCall({}) OneMoreElementList<E> this) {
        List<E> result = new ArrayList<>();
        result.addAll(list.toJDKList());
        result.add(lastElement);
        return result;
    }

    @org.checkerframework.dataflow.qual.SideEffectFree
    public @org.checkerframework.checker.mustcall.qual.MustCall({}) String toString(@org.checkerframework.checker.mustcall.qual.MustCall({}) OneMoreElementList<E> this) {
        return toJDKList().toString();
    }
}

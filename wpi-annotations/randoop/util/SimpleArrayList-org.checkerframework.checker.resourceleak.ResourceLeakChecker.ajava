package randoop.util;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.resourceleak.ResourceLeakChecker")
public class SimpleArrayList<E> extends ArrayList<E> implements SimpleList<E>, Serializable {

    private static final  @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) long serialVersionUID = 20180317;

    @org.checkerframework.dataflow.qual.SideEffectFree
    public SimpleArrayList(@org.checkerframework.checker.calledmethods.qual.CalledMethods({}) Collection<? extends E> c) {
        super(c);
    }

    @org.checkerframework.dataflow.qual.SideEffectFree
    public SimpleArrayList() {
        super();
    }

    @org.checkerframework.dataflow.qual.SideEffectFree
    public SimpleArrayList( @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) int initialCapacity) {
        super(initialCapacity);
    }

    @org.checkerframework.dataflow.qual.Pure
    public // Return the entire list.
    @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) SimpleList<E> getSublist(@org.checkerframework.checker.calledmethods.qual.CalledMethods({}) SimpleArrayList<E> this,  @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) int index) {
        return this;
    }

    @org.checkerframework.dataflow.qual.SideEffectFree
    public @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) List<E> toJDKList(@org.checkerframework.checker.calledmethods.qual.CalledMethods({}) SimpleArrayList<E> this) {
        return new ArrayList<>(this);
    }
}

package randoop.types;

/**
 * Represents {@code void}. Technically, {@code void} is used to indicate that a method has no
 * return values, and is not a type. However, we need to pretend that it is to be able to represent
 * typed operations.
 *
 * <p>The decision to have {@code void} be a separate "type" is counter to the fact that the
 * reflection method {@code Class.isPrimitive()} returns true for {@code void}.
 */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.signature.SignatureChecker")
public class VoidType extends Type {

    private static final @org.checkerframework.checker.signature.qual.SignatureUnknown VoidType value = new VoidType();

    private VoidType() {
    }

    @org.checkerframework.dataflow.qual.Pure
    public static @org.checkerframework.checker.signature.qual.SignatureUnknown VoidType getVoidType() {
        return value;
    }

    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.signature.qual.SignatureUnknown boolean equals(@org.checkerframework.checker.signature.qual.SignatureUnknown VoidType this, @org.checkerframework.checker.signature.qual.SignatureUnknown Object obj) {
        if (!(obj instanceof VoidType)) {
            return false;
        }
        return obj == value;
    }

    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.signature.qual.SignatureUnknown int hashCode(@org.checkerframework.checker.signature.qual.SignatureUnknown VoidType this) {
        return System.identityHashCode(this);
    }

    @org.checkerframework.dataflow.qual.Pure
    public @org.checkerframework.checker.signature.qual.SignatureUnknown Class<?> getRuntimeClass(@org.checkerframework.checker.signature.qual.SignatureUnknown VoidType this) {
        return void.class;
    }

    @org.checkerframework.dataflow.qual.Pure
    public @org.checkerframework.checker.signature.qual.SignatureUnknown String getFqName(@org.checkerframework.checker.signature.qual.SignatureUnknown VoidType this) {
        return "void";
    }

    @org.checkerframework.dataflow.qual.Pure
    public @org.checkerframework.checker.signature.qual.SignatureUnknown String getBinaryName(@org.checkerframework.checker.signature.qual.SignatureUnknown VoidType this) {
        return "void";
    }

    @org.checkerframework.dataflow.qual.Pure
    public @org.checkerframework.checker.signature.qual.SignatureUnknown String getSimpleName(@org.checkerframework.checker.signature.qual.SignatureUnknown VoidType this) {
        return this.getFqName();
    }

    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.signature.qual.SignatureUnknown boolean isVoid(@org.checkerframework.checker.signature.qual.SignatureUnknown VoidType this) {
        return true;
    }

    /**
     * {@inheritDoc}
     *
     * <p>Returns false, since {@code void} is not a subtype of any type
     */
    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.signature.qual.SignatureUnknown boolean isSubtypeOf(@org.checkerframework.checker.signature.qual.SignatureUnknown VoidType this, @org.checkerframework.checker.signature.qual.SignatureUnknown Type otherType) {
        return false;
    }

    /**
     * {@inheritDoc}
     *
     * <p>Return false because cannot assign to void.
     */
    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.signature.qual.SignatureUnknown boolean isAssignableFrom(@org.checkerframework.checker.signature.qual.SignatureUnknown VoidType this, @org.checkerframework.checker.signature.qual.SignatureUnknown Type sourceType) {
        return false;
    }
}

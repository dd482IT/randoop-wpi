package randoop.types;

import java.util.List;
import java.util.Objects;

/**
 * Represents a wildcard type argument to a parameterized type.
 *
 * <p>The subclasses represent the type bound as given for the wildcard.
 */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.common.returnsreceiver.ReturnsReceiverChecker")
public class WildcardArgument extends TypeArgument {

    /**
     * the wildcard type
     */
    private final  WildcardType argumentType;

    /**
     * Initializes the bound type.
     *
     * @param argumentType the wildcard type
     */
    WildcardArgument( WildcardType argumentType) {
        this.argumentType = argumentType;
    }

    /**
     * Creates a {@code WildcardArgument} from a {@code java.lang.reflect.Type}. A wildcard may have
     * either an upper or lower bound.
     *
     * @param type the {@code Type} object
     * @return the {@code WildcardArgument} created from the given {@code Type}
     */
    public static  WildcardArgument forType(java.lang.reflect. Type type) {
        if (!(type instanceof java.lang.reflect.WildcardType)) {
            throw new IllegalArgumentException("Must be a wildcard type " + type);
        }
        java.lang.reflect.WildcardType wildcardType = (java.lang.reflect.WildcardType) type;
        return new WildcardArgument(WildcardType.forType(wildcardType));
    }

    public static  WildcardArgument forType( ReferenceType argumentType) {
        assert argumentType instanceof WildcardType : "argument type must be wildcard type";
        return new WildcardArgument((WildcardType) argumentType);
    }

    @org.checkerframework.dataflow.qual.Pure
    public   boolean equals( WildcardArgument this,  Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof WildcardArgument)) {
            return false;
        }
        WildcardArgument wildcardArgument = (WildcardArgument) obj;
        return this.argumentType.equals(wildcardArgument.argumentType);
    }

    @org.checkerframework.dataflow.qual.Pure
    public   int hashCode( WildcardArgument this) {
        return Objects.hash(argumentType);
    }

    @org.checkerframework.dataflow.qual.Pure
    public  String getFqName( WildcardArgument this) {
        return argumentType.getFqName();
    }

    @org.checkerframework.dataflow.qual.Pure
    public  String getBinaryName( WildcardArgument this) {
        return argumentType.getBinaryName();
    }

    @org.checkerframework.dataflow.qual.Pure
    public  String toString( WildcardArgument this) {
        return argumentType.toString();
    }

    public  WildcardArgument substitute( WildcardArgument this,  Substitution substitution) {
        WildcardType argType = this.argumentType.substitute(substitution);
        if (argType.equals(this.argumentType)) {
            return this;
        }
        return new WildcardArgument(argType);
    }

    /**
     * Applies a capture conversion to the bound of this {@link WildcardArgument}.
     *
     * @return this wildcard argument with capture conversion applied to the type bound
     * @see ReferenceType#applyCaptureConversion()
     */
    public  WildcardArgument applyCaptureConversion( WildcardArgument this) {
        WildcardType wildcardType = argumentType.applyCaptureConversion();
        if (wildcardType.equals(argumentType)) {
            return this;
        }
        return new WildcardArgument(wildcardType);
    }

    public   boolean contains( WildcardArgument this,  TypeArgument argument) {
        return argument.isWildcard() && argumentType.contains(((WildcardArgument) argument).argumentType);
    }

    /**
     * Return the type of the upper/lower bound of this wildcard argument.
     *
     * @return the type of the bound of this wildcard argument
     */
    @org.checkerframework.dataflow.qual.Pure
    public  ParameterBound getTypeBound( WildcardArgument this) {
        return argumentType.getTypeBound();
    }

    /**
     * {@inheritDoc}
     *
     * <p>Returns the type parameters of the bound of this wildcard argument
     */
    @org.checkerframework.dataflow.qual.SideEffectFree
    public  List<TypeVariable> getTypeParameters( WildcardArgument this) {
        return argumentType.getTypeParameters();
    }

    /**
     * Indicates whether this wildcard argument has an upper bound. (If not, then it has a lower
     * bound.)
     *
     * @return true if this wildcard argument has an upper bound, false if it has a lower bound
     */
    @org.checkerframework.dataflow.qual.Pure
      boolean hasUpperBound( WildcardArgument this) {
        return argumentType.hasUpperBound();
    }

    @org.checkerframework.dataflow.qual.Pure
    public   boolean hasWildcard( WildcardArgument this) {
        return true;
    }

    @org.checkerframework.dataflow.qual.Pure
    public   boolean hasCaptureVariable( WildcardArgument this) {
        return false;
    }

    @org.checkerframework.dataflow.qual.Pure
    public   boolean isGeneric( WildcardArgument this,   boolean ignoreWildcards) {
        return argumentType.isGeneric(ignoreWildcards);
    }

    @org.checkerframework.dataflow.qual.Pure
      boolean isInstantiationOfTypeArgument( WildcardArgument this,  TypeArgument otherArgument) {
        if (this.equals(otherArgument)) {
            return true;
        }
        if (otherArgument instanceof ReferenceArgument) {
            ReferenceType otherReferenceType = ((ReferenceArgument) otherArgument).getReferenceType();
            if (otherReferenceType instanceof CaptureTypeVariable) {
                CaptureTypeVariable otherCaptureTypeVar = (CaptureTypeVariable) otherReferenceType;
                if (this.equals(otherCaptureTypeVar.getWildcard())) {
                    return true;
                }
            }
        }
        return false;
    }

    public  Substitution getInstantiatingSubstitution( WildcardArgument this,  TypeArgument goalType) {
        if (this.equals(goalType)) {
            return new Substitution();
        }
        if (goalType instanceof WildcardArgument) {
            return argumentType.getInstantiatingSubstitution(((WildcardArgument) goalType).argumentType);
        }
        if (goalType instanceof ReferenceArgument) {
            ReferenceType otherReferenceType = ((ReferenceArgument) goalType).getReferenceType();
            if (otherReferenceType instanceof CaptureTypeVariable) {
                CaptureTypeVariable otherCaptureTypeVar = (CaptureTypeVariable) otherReferenceType;
                return this.getInstantiatingSubstitution(otherCaptureTypeVar.getWildcard());
            }
        }
        return null;
    }

    @org.checkerframework.dataflow.qual.Pure
    public   boolean isWildcard( WildcardArgument this) {
        return true;
    }

    @org.checkerframework.dataflow.qual.Pure
    public   boolean isVariable( WildcardArgument this) {
        return false;
    }

    @org.checkerframework.dataflow.qual.Pure
     WildcardType getWildcardType( WildcardArgument this) {
        return argumentType;
    }
}

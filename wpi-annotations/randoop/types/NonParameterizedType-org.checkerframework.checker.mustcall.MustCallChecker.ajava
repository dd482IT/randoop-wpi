package randoop.types;

import java.lang.reflect.Modifier;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import org.plumelib.util.CollectionsPlume;

/**
 * {@code NonParameterizedType} represents a non-parameterized class, interface, enum, or the
 * rawtype of a generic class. It is a wrapper for a {@link Class} object, which is a runtime
 * representation of a type.
 */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.mustcall.MustCallChecker")
public class NonParameterizedType extends ClassOrInterfaceType {

    /**
     * The runtime class of this simple type.
     */
    private final @org.checkerframework.checker.mustcall.qual.MustCall({}) Class<?> runtimeType;

    /**
     * A cache of all NonParameterizedTypes that have been created.
     */
    private static final @org.checkerframework.checker.mustcall.qual.MustCall({}) Map<Class<?>, NonParameterizedType> cache = new HashMap<>();

    /**
     * Create a {@link NonParameterizedType} object for the runtime class.
     *
     * @param runtimeType the runtime class for the type
     * @return a NonParameterizedType for the argument
     */
    public static @org.checkerframework.checker.mustcall.qual.MustCall({}) NonParameterizedType forClass(@org.checkerframework.checker.mustcall.qual.MustCall({}) Class<?> runtimeType) {
        // This cannot be
        //   return cache.computeIfAbsent(runtimeType, NonParameterizedType::new);
        // because NonParameterizedType::new side-effects `cache`.  It does so by calling
        // ClassOrInterfaceType.forClass which may call back into NonParameterizedType.
        NonParameterizedType cached = cache.get(runtimeType);
        if (cached == null) {
            cached = new NonParameterizedType(runtimeType);
            cache.put(runtimeType, cached);
        }
        return cached;
    }

    /**
     * Create a {@link NonParameterizedType} object for the runtime class.
     *
     * @param runtimeType the runtime class for the type
     */
    public NonParameterizedType(@org.checkerframework.checker.mustcall.qual.MustCall({}) Class<?> runtimeType) {
        assert !runtimeType.isPrimitive() : "must be reference type, got " + runtimeType.getName();
        this.runtimeType = runtimeType;
        Class<?> enclosingClass = runtimeType.getEnclosingClass();
        if (enclosingClass != null) {
            this.setEnclosingType(ClassOrInterfaceType.forClass(enclosingClass));
        }
    }

    /**
     * {@inheritDoc}
     *
     * @return true if the runtime types are the same, false otherwise
     */
    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.mustcall.qual.MustCall({}) boolean equals(@org.checkerframework.checker.mustcall.qual.MustCall({}) NonParameterizedType this, @org.checkerframework.checker.mustcall.qual.MustCall({}) Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof NonParameterizedType)) {
            return false;
        }
        NonParameterizedType other = (NonParameterizedType) obj;
        return super.equals(obj) && this.runtimeType.equals(other.runtimeType);
    }

    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.mustcall.qual.MustCall({}) int hashCode(@org.checkerframework.checker.mustcall.qual.MustCall({}) NonParameterizedType this) {
        return Objects.hash(runtimeType);
    }

    public @org.checkerframework.checker.mustcall.qual.MustCall({}) NonParameterizedType substitute(@org.checkerframework.checker.mustcall.qual.MustCall({}) NonParameterizedType this, @org.checkerframework.checker.mustcall.qual.MustCall({}) Substitution substitution) {
        return (NonParameterizedType) substitute(substitution, new NonParameterizedType(this.runtimeType));
    }

    public @org.checkerframework.checker.mustcall.qual.MustCall({}) NonParameterizedType applyCaptureConversion(@org.checkerframework.checker.mustcall.qual.MustCall({}) NonParameterizedType this) {
        return (NonParameterizedType) applyCaptureConversion(this);
    }

    public @org.checkerframework.checker.mustcall.qual.MustCall({}) List<ClassOrInterfaceType> getInterfaces(@org.checkerframework.checker.mustcall.qual.MustCall({}) NonParameterizedType this) {
        if (this.isRawtype()) {
            return this.getRawTypeInterfaces();
        }
        return getGenericInterfaces();
    }

    /**
     * Returns the list of direct interfaces for this class.
     *
     * @return the list of direct interfaces for this class or interface type
     */
    private @org.checkerframework.checker.mustcall.qual.MustCall({}) List<ClassOrInterfaceType> getGenericInterfaces(@org.checkerframework.checker.mustcall.qual.MustCall({}) NonParameterizedType this) {
        return CollectionsPlume.mapList(ClassOrInterfaceType::forType, runtimeType.getGenericInterfaces());
    }

    @org.checkerframework.dataflow.qual.Pure
    public @org.checkerframework.checker.mustcall.qual.MustCall({}) NonParameterizedType getRawtype(@org.checkerframework.checker.mustcall.qual.MustCall({}) NonParameterizedType this) {
        return this;
    }

    /**
     * Returns the list of rawtypes for the direct interfaces for this type.
     *
     * @return the list of rawtypes for the direct interfaces of this type
     */
    private @org.checkerframework.checker.mustcall.qual.MustCall({}) List<ClassOrInterfaceType> getRawTypeInterfaces(@org.checkerframework.checker.mustcall.qual.MustCall({}) NonParameterizedType this) {
        return CollectionsPlume.mapList(NonParameterizedType::forClass, runtimeType.getInterfaces());
    }

    @org.checkerframework.dataflow.qual.Pure
    public @org.checkerframework.checker.mustcall.qual.MustCall({}) Class<?> getRuntimeClass(@org.checkerframework.checker.mustcall.qual.MustCall({}) NonParameterizedType this) {
        return runtimeType;
    }

    public @org.checkerframework.checker.mustcall.qual.MustCall({}) ClassOrInterfaceType getSuperclass(@org.checkerframework.checker.mustcall.qual.MustCall({}) NonParameterizedType this) {
        if (this.isObject()) {
            return this;
        }
        if (this.isRawtype()) {
            Class<?> superclass = this.runtimeType.getSuperclass();
            if (superclass != null) {
                return NonParameterizedType.forClass(superclass);
            }
        } else {
            java.lang.reflect.Type supertype = this.runtimeType.getGenericSuperclass();
            if (supertype != null) {
                return ClassOrInterfaceType.forType(supertype);
            }
        }
        return JavaTypes.OBJECT_TYPE;
    }

    public  @org.checkerframework.checker.mustcall.qual.MustCall({}) boolean isAbstract(@org.checkerframework.checker.mustcall.qual.MustCall({}) NonParameterizedType this) {
        return Modifier.isAbstract(Modifier.classModifiers() & runtimeType.getModifiers());
    }

    /**
     * {@inheritDoc}
     *
     * <p>Specifically checks for <a
     * href="https://docs.oracle.com/javase/specs/jls/se17/html/jls-5.html#jls-5.1.7">boxing
     * conversion (section 5.1.7)</a>
     */
    public  @org.checkerframework.checker.mustcall.qual.MustCall({}) boolean isAssignableFrom(@org.checkerframework.checker.mustcall.qual.MustCall({}) NonParameterizedType this, @org.checkerframework.checker.mustcall.qual.MustCall({}) Type sourceType) {
        // check identity and reference widening
        if (super.isAssignableFrom(sourceType)) {
            return true;
        }
        // otherwise, check for boxing conversion
        return sourceType.isPrimitive() && // JLS doesn't say so, void is primitive
        !sourceType.isVoid() && this.isAssignableFrom(((PrimitiveType) sourceType).toBoxedPrimitive());
    }

    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.mustcall.qual.MustCall({}) boolean isBoxedPrimitive(@org.checkerframework.checker.mustcall.qual.MustCall({}) NonParameterizedType this) {
        return PrimitiveTypes.isBoxedPrimitive(this.getRuntimeClass());
    }

    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.mustcall.qual.MustCall({}) boolean isEnum(@org.checkerframework.checker.mustcall.qual.MustCall({}) NonParameterizedType this) {
        return runtimeType.isEnum();
    }

    /**
     * {@inheritDoc}
     *
     * <p>For a {@link NonParameterizedType}, if this type instantiates the {@code otherType}, which
     * is a {@link NonParameterizedType} by {@link
     * ClassOrInterfaceType#isInstantiationOf(ReferenceType)} also checks that runtime classes are
     * equal. This allows for proper matching of member classes that are of {@link
     * NonParameterizedType}.
     */
    public  @org.checkerframework.checker.mustcall.qual.MustCall({}) boolean isInstantiationOf(@org.checkerframework.checker.mustcall.qual.MustCall({}) NonParameterizedType this, @org.checkerframework.checker.mustcall.qual.MustCall({}) ReferenceType otherType) {
        boolean instantiationOf = super.isInstantiationOf(otherType);
        if ((otherType instanceof NonParameterizedType)) {
            return instantiationOf && this.runtimeClassIs(otherType.getRuntimeClass());
        }
        return instantiationOf;
    }

    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.mustcall.qual.MustCall({}) boolean isInterface(@org.checkerframework.checker.mustcall.qual.MustCall({}) NonParameterizedType this) {
        return runtimeType.isInterface();
    }

    public  @org.checkerframework.checker.mustcall.qual.MustCall({}) boolean isRawtype(@org.checkerframework.checker.mustcall.qual.MustCall({}) NonParameterizedType this) {
        return runtimeType.getTypeParameters().length > 0;
    }

    public  @org.checkerframework.checker.mustcall.qual.MustCall({}) boolean isStatic(@org.checkerframework.checker.mustcall.qual.MustCall({}) NonParameterizedType this) {
        return Modifier.isStatic(runtimeType.getModifiers() & Modifier.classModifiers());
    }

    /**
     * If this type is a boxed primitive, unboxes this type and returns the primitive type.
     *
     * @return the primitive type if this is a boxed primitive
     * @throws IllegalArgumentException if this is not a boxed primitive type
     */
    public @org.checkerframework.checker.mustcall.qual.MustCall({}) PrimitiveType toPrimitive(@org.checkerframework.checker.mustcall.qual.MustCall({}) NonParameterizedType this) {
        if (this.isBoxedPrimitive()) {
            Class<?> primitiveClass = PrimitiveTypes.toUnboxedType(this.getRuntimeClass());
            return PrimitiveType.forClass(primitiveClass);
        }
        throw new IllegalArgumentException("Type must be boxed primitive");
    }
}

package randoop.types;

import java.lang.reflect.WildcardType;
import java.util.ArrayList;
import java.util.List;

/**
 * Represents a type argument of a parameterized type as described in <a
 * href="https://docs.oracle.com/javase/specs/jls/se17/html/jls-4.html#jls-4.5.1">JLS Section
 * 4.5.1</a>.
 *
 * <pre>
 *   TypeArgument:
 *     ReferenceType
 *     Wildcard
 * </pre>
 *
 * @see ReferenceArgument
 * @see WildcardArgument
 */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.resourceleak.ResourceLeakChecker")
public abstract class TypeArgument {

    /**
     * Converts a {@code java.lang.reflect.Type} to a {@code TypeArgument} object.
     *
     * @param type the type of a type argument
     * @return the {@code TypeArgument} for the given type
     */
    public static @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) TypeArgument forType(java.lang.reflect.Type type) {
        if (type instanceof WildcardType) {
            return WildcardArgument.forType(type);
        } else {
            return ReferenceArgument.forType(type);
        }
    }

    public static @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) TypeArgument forType(@org.checkerframework.checker.calledmethods.qual.CalledMethods({}) ReferenceType referenceType) {
        if (referenceType instanceof randoop.types.WildcardType) {
            return WildcardArgument.forType(referenceType);
        }
        return ReferenceArgument.forType(referenceType);
    }

    /**
     * Applies the type substitution to this type argument.
     *
     * @param substitution the substitution
     * @return a version of this type argument with type variables replaced by the substitution
     */
    @org.checkerframework.dataflow.qual.Pure
    public abstract @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) TypeArgument substitute(@org.checkerframework.checker.calledmethods.qual.CalledMethods({}) TypeArgument this, @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) Substitution substitution);

    /**
     * Checks whether this type argument contains another argument, using relationship defined in <a
     * href="https://docs.oracle.com/javase/specs/jls/se17/html/jls-4.html#jls-4.5.1">JLS Section
     * 4.5.1</a>.
     *
     * @param otherArgument the other {@code TypeArgument}
     * @return true if this argument contains the other argument
     */
    @org.checkerframework.dataflow.qual.Pure
    public abstract  @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) boolean contains(@org.checkerframework.checker.calledmethods.qual.CalledMethods({}) TypeArgument this, @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) TypeArgument otherArgument);

    /**
     * The type parameters for this type argument.
     *
     * @return the list of type parameters for this argument
     */
    @org.checkerframework.dataflow.qual.SideEffectFree
    public @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) List<TypeVariable> getTypeParameters(@org.checkerframework.checker.calledmethods.qual.CalledMethods({}) TypeArgument this) {
        return new ArrayList<>();
    }

    /**
     * Indicate whether this type argument has a wildcard.
     *
     * @return true if this argument has a wildcard argument
     */
    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) boolean hasWildcard(@org.checkerframework.checker.calledmethods.qual.CalledMethods({}) TypeArgument this) {
        return false;
    }

    /**
     * Indicate whether this type argument has a capture variable.
     *
     * @return true if this argument has a capture variable
     */
    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) boolean hasCaptureVariable(@org.checkerframework.checker.calledmethods.qual.CalledMethods({}) TypeArgument this) {
        return false;
    }

    /**
     * Indicates whether this type argument is generic.
     *
     * @return true if this type argument is generic, false otherwise
     */
    @org.checkerframework.checker.calledmethods.qual.EnsuresCalledMethods(value = { "this" }, methods = { "isGeneric" })
    @org.checkerframework.dataflow.qual.Pure
    public final  @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) boolean isGeneric() {
        return isGeneric(false);
    }

    /**
     * Indicates whether this type argument is generic.
     *
     * @param ignoreWildcards if true, ignore wildcards; that is, treat wildcards as not making the
     *     operation generic
     * @return true if this type argument is generic, false otherwise
     */
    @org.checkerframework.dataflow.qual.Pure
    public abstract  @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) boolean isGeneric(@org.checkerframework.checker.calledmethods.qual.CalledMethods({}) TypeArgument this,  @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) boolean ignoreWildcards);

    /**
     * Determines whether this type argument is an instantiation of the other argument.
     *
     * @param otherArgument the other argument
     * @return true if this type is an instantiation of the other argument, false otherwise
     * @see InstantiatedType#isInstantiationOf(ReferenceType)
     */
    @org.checkerframework.dataflow.qual.Pure
     @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) boolean isInstantiationOfTypeArgument(@org.checkerframework.checker.calledmethods.qual.CalledMethods({}) TypeArgument this, @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) TypeArgument otherArgument) {
        return false;
    }

    /**
     * Indicate whether this type argument is a wildcard argument.
     *
     * @return true if this is a wildcard argument, false otherwise
     */
    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) boolean isWildcard(@org.checkerframework.checker.calledmethods.qual.CalledMethods({}) TypeArgument this) {
        return false;
    }

    /**
     * Returns a unifying substitution. Returns null if unification failed.
     *
     * @param goalType the generic type for which a substitution is needed
     * @return a substitution unifying this type or a supertype of this type with the goal type, or
     *     null if unification failed
     */
    @org.checkerframework.dataflow.qual.Pure
    public @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) Substitution getInstantiatingSubstitution(@org.checkerframework.checker.calledmethods.qual.CalledMethods({}) TypeArgument this, @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) TypeArgument goalType) {
        // This implementation indicates failure.  It is overridden by subclasses.
        return null;
    }

    /**
     * Indicate whether this type argument is a type variable.
     *
     * @return true if this argument is a type variable, false otherwise
     */
    @org.checkerframework.dataflow.qual.Pure
    public abstract  @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) boolean isVariable(@org.checkerframework.checker.calledmethods.qual.CalledMethods({}) TypeArgument this);

    /**
     * Return the fully-qualified name.
     *
     * @return the fully-qualified name
     */
    @org.checkerframework.dataflow.qual.Pure
    public abstract @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) String getFqName();

    /**
     * Return the binary name.
     *
     * @return the binary name
     */
    @org.checkerframework.dataflow.qual.Pure
    public abstract @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) String getBinaryName();
}

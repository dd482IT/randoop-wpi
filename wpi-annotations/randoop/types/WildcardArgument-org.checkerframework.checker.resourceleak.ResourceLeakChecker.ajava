package randoop.types;

import java.util.List;
import java.util.Objects;

/**
 * Represents a wildcard type argument to a parameterized type.
 *
 * <p>The subclasses represent the type bound as given for the wildcard.
 */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.resourceleak.ResourceLeakChecker")
public class WildcardArgument extends TypeArgument {

    /**
     * the wildcard type
     */
    private final @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) WildcardType argumentType;

    /**
     * Initializes the bound type.
     *
     * @param argumentType the wildcard type
     */
    WildcardArgument(@org.checkerframework.checker.calledmethods.qual.CalledMethods({}) WildcardType argumentType) {
        this.argumentType = argumentType;
    }

    /**
     * Creates a {@code WildcardArgument} from a {@code java.lang.reflect.Type}. A wildcard may have
     * either an upper or lower bound.
     *
     * @param type the {@code Type} object
     * @return the {@code WildcardArgument} created from the given {@code Type}
     */
    public static @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) WildcardArgument forType(java.lang.reflect.@org.checkerframework.checker.calledmethods.qual.CalledMethods({}) Type type) {
        if (!(type instanceof java.lang.reflect.WildcardType)) {
            throw new IllegalArgumentException("Must be a wildcard type " + type);
        }
        java.lang.reflect.WildcardType wildcardType = (java.lang.reflect.WildcardType) type;
        return new WildcardArgument(WildcardType.forType(wildcardType));
    }

    public static @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) WildcardArgument forType(@org.checkerframework.checker.calledmethods.qual.CalledMethods({}) ReferenceType argumentType) {
        assert argumentType instanceof WildcardType : "argument type must be wildcard type";
        return new WildcardArgument((WildcardType) argumentType);
    }

    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) boolean equals(@org.checkerframework.checker.calledmethods.qual.CalledMethods({}) WildcardArgument this, @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof WildcardArgument)) {
            return false;
        }
        WildcardArgument wildcardArgument = (WildcardArgument) obj;
        return this.argumentType.equals(wildcardArgument.argumentType);
    }

    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) int hashCode(@org.checkerframework.checker.calledmethods.qual.CalledMethods({}) WildcardArgument this) {
        return Objects.hash(argumentType);
    }

    @org.checkerframework.checker.calledmethods.qual.EnsuresCalledMethods(value = { "this.argumentType" }, methods = { "getFqName" })
    @org.checkerframework.dataflow.qual.Pure
    public @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) String getFqName(@org.checkerframework.checker.calledmethods.qual.CalledMethods({}) WildcardArgument this) {
        return argumentType.getFqName();
    }

    @org.checkerframework.checker.calledmethods.qual.EnsuresCalledMethods(value = { "this.argumentType" }, methods = { "getBinaryName" })
    @org.checkerframework.dataflow.qual.Pure
    public @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) String getBinaryName(@org.checkerframework.checker.calledmethods.qual.CalledMethods({}) WildcardArgument this) {
        return argumentType.getBinaryName();
    }

    @org.checkerframework.checker.calledmethods.qual.EnsuresCalledMethods(value = { "this.argumentType" }, methods = { "toString" })
    @org.checkerframework.dataflow.qual.Pure
    public @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) String toString(@org.checkerframework.checker.calledmethods.qual.CalledMethods({}) WildcardArgument this) {
        return argumentType.toString();
    }

    @org.checkerframework.checker.calledmethods.qual.EnsuresCalledMethods(value = { "this.argumentType" }, methods = { "getTypeBound", "substitute" })
    public @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) WildcardArgument substitute(@org.checkerframework.checker.calledmethods.qual.CalledMethods({}) WildcardArgument this, @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) Substitution substitution) {
        WildcardType argType = this.argumentType.substitute(substitution);
        if (argType.equals(this.argumentType)) {
            return this;
        }
        return new WildcardArgument(argType);
    }

    /**
     * Applies a capture conversion to the bound of this {@link WildcardArgument}.
     *
     * @return this wildcard argument with capture conversion applied to the type bound
     * @see ReferenceType#applyCaptureConversion()
     */
    @org.checkerframework.checker.calledmethods.qual.EnsuresCalledMethods(value = { "this.argumentType" }, methods = { "applyCaptureConversion", "getTypeBound" })
    public @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) WildcardArgument applyCaptureConversion(@org.checkerframework.checker.calledmethods.qual.CalledMethods({ "isWildcard" }) WildcardArgument this) {
        WildcardType wildcardType = argumentType.applyCaptureConversion();
        if (wildcardType.equals(argumentType)) {
            return this;
        }
        return new WildcardArgument(wildcardType);
    }

    @org.checkerframework.checker.calledmethods.qual.EnsuresCalledMethods(value = { "#1" }, methods = { "isWildcard" })
    public  @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) boolean contains(@org.checkerframework.checker.calledmethods.qual.CalledMethods({}) WildcardArgument this, @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) TypeArgument argument) {
        return argument.isWildcard() && argumentType.contains(((WildcardArgument) argument).argumentType);
    }

    /**
     * Return the type of the upper/lower bound of this wildcard argument.
     *
     * @return the type of the bound of this wildcard argument
     */
    @org.checkerframework.checker.calledmethods.qual.EnsuresCalledMethods(value = { "this.argumentType" }, methods = { "getTypeBound" })
    @org.checkerframework.dataflow.qual.Pure
    public @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) ParameterBound getTypeBound(@org.checkerframework.checker.calledmethods.qual.CalledMethods({}) WildcardArgument this) {
        return argumentType.getTypeBound();
    }

    /**
     * {@inheritDoc}
     *
     * <p>Returns the type parameters of the bound of this wildcard argument
     */
    @org.checkerframework.checker.calledmethods.qual.EnsuresCalledMethods(value = { "this.argumentType" }, methods = { "getTypeParameters" })
    @org.checkerframework.dataflow.qual.SideEffectFree
    public @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) List<TypeVariable> getTypeParameters(@org.checkerframework.checker.calledmethods.qual.CalledMethods({}) WildcardArgument this) {
        return argumentType.getTypeParameters();
    }

    /**
     * Indicates whether this wildcard argument has an upper bound. (If not, then it has a lower
     * bound.)
     *
     * @return true if this wildcard argument has an upper bound, false if it has a lower bound
     */
    @org.checkerframework.checker.calledmethods.qual.EnsuresCalledMethods(value = { "this.argumentType" }, methods = { "hasUpperBound" })
    @org.checkerframework.dataflow.qual.Pure
     @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) boolean hasUpperBound(@org.checkerframework.checker.calledmethods.qual.CalledMethods({}) WildcardArgument this) {
        return argumentType.hasUpperBound();
    }

    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) boolean hasWildcard(@org.checkerframework.checker.calledmethods.qual.CalledMethods({}) WildcardArgument this) {
        return true;
    }

    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) boolean hasCaptureVariable(@org.checkerframework.checker.calledmethods.qual.CalledMethods({}) WildcardArgument this) {
        return false;
    }

    @org.checkerframework.checker.calledmethods.qual.EnsuresCalledMethods(value = { "this.argumentType" }, methods = { "getTypeBound", "isGeneric" })
    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) boolean isGeneric(@org.checkerframework.checker.calledmethods.qual.CalledMethods({}) WildcardArgument this,  @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) boolean ignoreWildcards) {
        return argumentType.isGeneric(ignoreWildcards);
    }

    @org.checkerframework.checker.calledmethods.qual.EnsuresCalledMethods(value = { "this" }, methods = { "equals" })
    @org.checkerframework.dataflow.qual.Pure
     @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) boolean isInstantiationOfTypeArgument(@org.checkerframework.checker.calledmethods.qual.CalledMethods({}) WildcardArgument this, @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) TypeArgument otherArgument) {
        if (this.equals(otherArgument)) {
            return true;
        }
        if (otherArgument instanceof ReferenceArgument) {
            ReferenceType otherReferenceType = ((ReferenceArgument) otherArgument).getReferenceType();
            if (otherReferenceType instanceof CaptureTypeVariable) {
                CaptureTypeVariable otherCaptureTypeVar = (CaptureTypeVariable) otherReferenceType;
                if (this.equals(otherCaptureTypeVar.getWildcard())) {
                    return true;
                }
            }
        }
        return false;
    }

    @org.checkerframework.checker.calledmethods.qual.EnsuresCalledMethods(value = { "this" }, methods = { "equals" })
    public @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) Substitution getInstantiatingSubstitution(@org.checkerframework.checker.calledmethods.qual.CalledMethods({}) WildcardArgument this, @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) TypeArgument goalType) {
        if (this.equals(goalType)) {
            return new Substitution();
        }
        if (goalType instanceof WildcardArgument) {
            return argumentType.getInstantiatingSubstitution(((WildcardArgument) goalType).argumentType);
        }
        if (goalType instanceof ReferenceArgument) {
            ReferenceType otherReferenceType = ((ReferenceArgument) goalType).getReferenceType();
            if (otherReferenceType instanceof CaptureTypeVariable) {
                CaptureTypeVariable otherCaptureTypeVar = (CaptureTypeVariable) otherReferenceType;
                return this.getInstantiatingSubstitution(otherCaptureTypeVar.getWildcard());
            }
        }
        return null;
    }

    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) boolean isWildcard(@org.checkerframework.checker.calledmethods.qual.CalledMethods({}) WildcardArgument this) {
        return true;
    }

    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) boolean isVariable(@org.checkerframework.checker.calledmethods.qual.CalledMethods({}) WildcardArgument this) {
        return false;
    }

    @org.checkerframework.dataflow.qual.Pure
    @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) WildcardType getWildcardType(@org.checkerframework.checker.calledmethods.qual.CalledMethods({ "isWildcard" }) WildcardArgument this) {
        return argumentType;
    }
}

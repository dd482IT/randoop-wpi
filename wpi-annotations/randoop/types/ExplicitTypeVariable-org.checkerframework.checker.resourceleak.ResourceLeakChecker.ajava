package randoop.types;

import java.util.Objects;

/**
 * Represents a type variable that is a type parameter. (See JLS, section 4.3.)
 */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.resourceleak.ResourceLeakChecker")
class ExplicitTypeVariable extends TypeVariable {

    /**
     * the type parameter
     */
    private final java.lang.reflect.@org.checkerframework.checker.calledmethods.qual.CalledMethods({}) TypeVariable<?> variable;

    /**
     * Create a {@code ExplicitTypeVariable} for the given type parameter.
     *
     * @param variable the type parameter
     * @param bound the upper bound on the parameter
     */
    ExplicitTypeVariable(java.lang.reflect.@org.checkerframework.checker.calledmethods.qual.CalledMethods({}) TypeVariable<?> variable, @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) ParameterBound bound) {
        super(new EagerReferenceBound(JavaTypes.NULL_TYPE), bound);
        this.variable = variable;
    }

    /**
     * {@inheritDoc}
     *
     * <p>Checks that the type parameter is equal. This may be more restrictive than desired because
     * equivalent TypeVariable objects from different instances of the same type may be distinct.
     *
     * @return true if the type parameters are equal, false otherwise
     */
    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) boolean equals(@org.checkerframework.checker.calledmethods.qual.CalledMethods({}) ExplicitTypeVariable this, @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof ExplicitTypeVariable)) {
            return isAssignableFrom(null);
        }
        ExplicitTypeVariable t = (ExplicitTypeVariable) obj;
        return variable.equals(t.variable) && super.equals(t);
    }

    @org.checkerframework.checker.calledmethods.qual.EnsuresCalledMethods(value = { "this" }, methods = { "hashCode" })
    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) int hashCode(@org.checkerframework.checker.calledmethods.qual.CalledMethods({}) ExplicitTypeVariable this) {
        return Objects.hash(variable, super.hashCode());
    }

    @org.checkerframework.checker.calledmethods.qual.EnsuresCalledMethods(value = { "this.variable" }, methods = { "getName" })
    public @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) String getFqName(@org.checkerframework.checker.calledmethods.qual.CalledMethods({}) ExplicitTypeVariable this) {
        return variable.getName();
    }

    @org.checkerframework.checker.calledmethods.qual.EnsuresCalledMethods(value = { "this.variable" }, methods = { "getName" })
    public @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) String getBinaryName(@org.checkerframework.checker.calledmethods.qual.CalledMethods({}) ExplicitTypeVariable this) {
        return variable.getName();
    }

    @org.checkerframework.checker.calledmethods.qual.EnsuresCalledMethods(value = { "this" }, methods = { "getFqName" })
    @org.checkerframework.checker.calledmethods.qual.EnsuresCalledMethods(value = { "this.variable" }, methods = { "getName" })
    @org.checkerframework.dataflow.qual.Pure
    public @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) String getSimpleName(@org.checkerframework.checker.calledmethods.qual.CalledMethods({}) ExplicitTypeVariable this) {
        return this.getFqName();
    }

    @org.checkerframework.dataflow.qual.Pure
    java.lang.reflect.@org.checkerframework.checker.calledmethods.qual.CalledMethods({}) TypeVariable<?> getReflectionTypeVariable(@org.checkerframework.checker.calledmethods.qual.CalledMethods({}) ExplicitTypeVariable this) {
        return this.variable;
    }

    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) boolean isGeneric(@org.checkerframework.checker.calledmethods.qual.CalledMethods({}) ExplicitTypeVariable this,  @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) boolean ignoreWildcards) {
        return true;
    }

    @org.checkerframework.checker.calledmethods.qual.EnsuresCalledMethods(value = { "#1" }, methods = { "get" })
    @org.checkerframework.checker.calledmethods.qual.EnsuresCalledMethods(value = { "this" }, methods = { "getUpperTypeBound" })
    public @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) ReferenceType substitute(@org.checkerframework.checker.calledmethods.qual.CalledMethods({}) ExplicitTypeVariable this, @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) Substitution substitution) {
        ReferenceType type = substitution.get(this);
        if (type != null && !type.isVariable()) {
            return type;
        }
        ParameterBound upperBound = getUpperTypeBound().substitute(substitution);
        if (type == null) {
            if (!upperBound.equals(getUpperTypeBound())) {
                return new ExplicitTypeVariable(this.variable, upperBound);
            }
            return this;
        }
        if (!upperBound.equals(getUpperTypeBound())) {
            return ((TypeVariable) type).createCopyWithBounds(getLowerTypeBound(), upperBound);
        }
        return type;
    }

    public @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) TypeVariable createCopyWithBounds(@org.checkerframework.checker.calledmethods.qual.CalledMethods({ "isVariable" }) ExplicitTypeVariable this, @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) ParameterBound lowerBound, @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) ParameterBound upperBound) {
        return new ExplicitTypeVariable(this.variable, upperBound);
    }
}

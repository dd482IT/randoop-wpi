package randoop.types;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.List;

/**
 * Constants for non-JDK Java types. Include primitive types, {@code Class<>}, {@code Object},
 * {@code Cloneable}, {@code Comparable}, {@code Serializable}, {@code String}, the null type, and
 * {@code void}.
 */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.signature.SignatureChecker")
public class JavaTypes {

    /**
     * The {@code boolean} type.
     */
    public static final @org.checkerframework.checker.signature.qual.SignatureUnknown PrimitiveType BOOLEAN_TYPE = PrimitiveType.forClass(boolean.class);

    /**
     * The {@code byte} type.
     */
    public static final @org.checkerframework.checker.signature.qual.SignatureUnknown PrimitiveType BYTE_TYPE = PrimitiveType.forClass(byte.class);

    /**
     * The {@code char} type.
     */
    public static final @org.checkerframework.checker.signature.qual.SignatureUnknown PrimitiveType CHAR_TYPE = PrimitiveType.forClass(char.class);

    /**
     * The {@code double} type.
     */
    public static final @org.checkerframework.checker.signature.qual.SignatureUnknown PrimitiveType DOUBLE_TYPE = PrimitiveType.forClass(double.class);

    /**
     * The {@code float} type.
     */
    public static final @org.checkerframework.checker.signature.qual.SignatureUnknown PrimitiveType FLOAT_TYPE = PrimitiveType.forClass(float.class);

    /**
     * The {@code int} type.
     */
    public static final @org.checkerframework.checker.signature.qual.SignatureUnknown PrimitiveType INT_TYPE = PrimitiveType.forClass(int.class);

    /**
     * The {@code long} type.
     */
    public static final @org.checkerframework.checker.signature.qual.SignatureUnknown PrimitiveType LONG_TYPE = PrimitiveType.forClass(long.class);

    /**
     * The {@code short} type.
     */
    public static final @org.checkerframework.checker.signature.qual.SignatureUnknown PrimitiveType SHORT_TYPE = PrimitiveType.forClass(short.class);

    /**
     * The {@code java.lang.Object} type.
     */
    public static final @org.checkerframework.checker.signature.qual.SignatureUnknown ClassOrInterfaceType OBJECT_TYPE = NonParameterizedType.forClass(Object.class);

    // This is used in CLASS_TYPE, so put it before CLASS_TYPE.
    // To ensure order, could put all initialization in a static initializer block.
    /**
     * The Null type is the lower bound of reference types and is only used in {@link
     * randoop.types.CaptureTypeVariable}
     */
    public static final @org.checkerframework.checker.signature.qual.SignatureUnknown ReferenceType NULL_TYPE = NullReferenceType.getNullType();

    /**
     * The {@code java.lang.Class<?>} type.
     */
    public static final @org.checkerframework.checker.signature.qual.SignatureUnknown GenericClassType CLASS_TYPE = new GenericClassType(Class.class);

    /**
     * The {@code java.lang.Comparable} type.
     */
    public static final @org.checkerframework.checker.signature.qual.SignatureUnknown GenericClassType COMPARABLE_TYPE = new GenericClassType(Comparable.class);

    /**
     * The {@code java.lang.String} type.
     */
    public static final @org.checkerframework.checker.signature.qual.SignatureUnknown ClassOrInterfaceType STRING_TYPE = NonParameterizedType.forClass(String.class);

    /**
     * The {@code java.util.Collection} type.
     */
    public static final @org.checkerframework.checker.signature.qual.SignatureUnknown ClassOrInterfaceType COLLECTION_TYPE = NonParameterizedType.forClass(Collection.class);

    /**
     * The {@code java.lang.Cloneable} type.
     */
    public static final @org.checkerframework.checker.signature.qual.SignatureUnknown ReferenceType CLONEABLE_TYPE = NonParameterizedType.forClass(Cloneable.class);

    /**
     * The {@code java.lang Serializable} type.
     */
    public static final @org.checkerframework.checker.signature.qual.SignatureUnknown ReferenceType SERIALIZABLE_TYPE = NonParameterizedType.forClass(Serializable.class);

    /**
     * The void {@link VoidType}
     */
    public static final @org.checkerframework.checker.signature.qual.SignatureUnknown VoidType VOID_TYPE = VoidType.getVoidType();

    /**
     * The list of primitive types.
     */
    private static final @org.checkerframework.checker.signature.qual.SignatureUnknown List<PrimitiveType> PRIMITIVE_TYPES;

    static {
        ArrayList<PrimitiveType> types = new ArrayList<>(8);
        types.add(BOOLEAN_TYPE);
        types.add(BYTE_TYPE);
        types.add(CHAR_TYPE);
        types.add(DOUBLE_TYPE);
        types.add(FLOAT_TYPE);
        types.add(INT_TYPE);
        types.add(LONG_TYPE);
        types.add(SHORT_TYPE);
        PRIMITIVE_TYPES = Collections.unmodifiableList(types);
    }

    /**
     * Returns the list of (non-void) primitive types.
     *
     * @return the list of (non-void) primitive types
     */
    @org.checkerframework.dataflow.qual.Pure
    public static @org.checkerframework.checker.signature.qual.SignatureUnknown List<PrimitiveType> getPrimitiveTypes() {
        return PRIMITIVE_TYPES;
    }
}

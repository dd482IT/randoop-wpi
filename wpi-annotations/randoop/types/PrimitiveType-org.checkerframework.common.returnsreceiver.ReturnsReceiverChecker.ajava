package randoop.types;

import java.util.HashMap;
import java.util.Map;

/**
 * Represents a Java primitive type. Corresponds to primitive types as defined in JLS <a
 * href="https://docs.oracle.com/javase/specs/jls/se17/html/jls-4.html#jls-PrimitiveType">section
 * 4.2</a>.
 */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.common.returnsreceiver.ReturnsReceiverChecker")
public class PrimitiveType extends Type {

    /**
     * The runtime class of the primitive type.
     */
    private final  Class<?> runtimeClass;

    /**
     * All the PrimitiveTypes that have been created.
     */
    private static  Map<Class<?>, PrimitiveType> cache = new HashMap<>();

    /**
     * Creates a primitive type from the given runtime class.
     *
     * @param runtimeClass the runtime class
     * @return the PrimitiveType for the given runtime class
     */
    public static  PrimitiveType forClass( Class<?> runtimeClass) {
        return cache.computeIfAbsent(runtimeClass, PrimitiveType::new);
    }

    /**
     * Creates a primitive type from the given runtime class.
     *
     * @param runtimeClass the runtime class
     */
    private PrimitiveType(Class<?> runtimeClass) {
        assert runtimeClass.isPrimitive() : "must be initialized with primitive type, got " + runtimeClass.getName();
        assert !runtimeClass.equals(void.class) : "void should be represented by VoidType";
        this.runtimeClass = runtimeClass;
    }

    /**
     * {@inheritDoc}
     *
     * @return true if the runtime class of this primitive type and the object are the same, false
     *     otherwise
     */
    @org.checkerframework.dataflow.qual.Pure
    public   boolean equals( PrimitiveType this,  Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof PrimitiveType)) {
            return false;
        }
        PrimitiveType t = (PrimitiveType) obj;
        return this.runtimeClass.equals(t.runtimeClass);
    }

    @org.checkerframework.dataflow.qual.Pure
    public   int hashCode( PrimitiveType this) {
        return runtimeClass.hashCode();
    }

    public  String getFqName( PrimitiveType this) {
        return runtimeClass.getCanonicalName();
    }

    public  String getBinaryName( PrimitiveType this) {
        return runtimeClass.getCanonicalName();
    }

    public  String getSimpleName( PrimitiveType this) {
        return runtimeClass.getSimpleName();
    }

    /**
     * {@inheritDoc}
     *
     * @return the {@code Class} object for this primitive type
     */
    @org.checkerframework.dataflow.qual.Pure
    public  Class<?> getRuntimeClass( PrimitiveType this) {
        return runtimeClass;
    }

    /**
     * {@inheritDoc}
     *
     * <p>Checks for <a
     * href="https://docs.oracle.com/javase/specs/jls/se17/html/jls-5.html#jls-5.1.2">primitive
     * widening (section 5.1.2)</a>, and <a
     * href="https://docs.oracle.com/javase/specs/jls/se17/html/jls-5.html#jls-5.1.8">unboxing
     * (section 5.1.8)</a> conversions. For a primitive type, returns true if this type can be
     * assigned from the source type by primitive widening or unboxing.
     */
    public   boolean isAssignableFrom( PrimitiveType this,  Type sourceType) {
        if (super.isAssignableFrom(sourceType)) {
            return true;
        }
        // test for primitive widening or unboxing conversion
        if (sourceType.isPrimitive()) {
            // primitive widening conversion
            return PrimitiveTypes.isAssignable(this.runtimeClass, sourceType.getRuntimeClass());
        }
        if (sourceType.isBoxedPrimitive()) {
            // unbox then primitive widening conversion
            PrimitiveType primitiveSourceType = ((NonParameterizedType) sourceType).toPrimitive();
            return this.isAssignableFrom(primitiveSourceType);
        }
        return false;
    }

    /**
     * {@inheritDoc}
     *
     * @return true since this object represents a primitive type
     */
    @org.checkerframework.dataflow.qual.Pure
    public   boolean isPrimitive( PrimitiveType this) {
        return true;
    }

    /**
     * {@inheritDoc}
     *
     * @return true since this object represents a non-receiver type
     */
    @org.checkerframework.dataflow.qual.Pure
    public   boolean isNonreceiverType( PrimitiveType this) {
        return true;
    }

    /**
     * {@inheritDoc}
     *
     * <p>Specifically implements tests for primitive types as defined in <a
     * href="https://docs.oracle.com/javase/specs/jls/se17/html/jls-4.html#jls-4.10.1">section 4.10.1
     * of JLS for JavaSE 8</a>.
     */
    @org.checkerframework.dataflow.qual.Pure
    public   boolean isSubtypeOf( PrimitiveType this,  Type otherType) {
        return otherType.isPrimitive() && PrimitiveTypes.isSubtype(this.getRuntimeClass(), otherType.getRuntimeClass());
    }

    /**
     * Returns the boxed type for this primitive type.
     *
     * @return the boxed type for this primitive type
     */
    public  NonParameterizedType toBoxedPrimitive( PrimitiveType this) {
        return NonParameterizedType.forClass(PrimitiveTypes.toBoxedType(this.getRuntimeClass()));
    }
}

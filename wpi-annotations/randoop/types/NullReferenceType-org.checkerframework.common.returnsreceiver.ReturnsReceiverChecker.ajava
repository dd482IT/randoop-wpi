package randoop.types;

/**
 * The {@code null} type is the type of the value {@code null}. As the subtype of all reference
 * types, it is the default lowerbound of a {@link CaptureTypeVariable}.
 */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.common.returnsreceiver.ReturnsReceiverChecker")
class NullReferenceType extends ReferenceType {

    private static final  NullReferenceType value = new NullReferenceType();

    private NullReferenceType() {
    }

    /**
     * Returns the null type.
     *
     * @return the null type object
     */
    @org.checkerframework.dataflow.qual.Pure
    static  NullReferenceType getNullType() {
        return value;
    }

    @org.checkerframework.dataflow.qual.Pure
    public   boolean equals( NullReferenceType this,  Object obj) {
        if (this == obj) {
            return true;
        }
        if (!(obj instanceof NullReferenceType)) {
            return false;
        }
        return obj == value;
    }

    @org.checkerframework.dataflow.qual.Pure
    public   int hashCode( NullReferenceType this) {
        return System.identityHashCode(this);
    }

    /**
     * {@inheritDoc}
     *
     * <p>This method returns null since the {@link NullReferenceType} does not have a runtime
     * representation
     */
    @org.checkerframework.dataflow.qual.Pure
    public Class<?> getRuntimeClass( NullReferenceType this) {
        return null;
    }

    @org.checkerframework.dataflow.qual.Pure
    public  ReferenceType substitute( NullReferenceType this,  Substitution substitution) {
        return this;
    }

    @org.checkerframework.dataflow.qual.Pure
    public  String getFqName( NullReferenceType this) {
        return "NullType";
    }

    @org.checkerframework.dataflow.qual.Pure
    public  String getBinaryName( NullReferenceType this) {
        return "NullType";
    }

    @org.checkerframework.dataflow.qual.Pure
    public  String getSimpleName( NullReferenceType this) {
        return this.getFqName();
    }

    @org.checkerframework.dataflow.qual.Pure
    public  String getCanonicalName( NullReferenceType this) {
        return this.getFqName();
    }

    @org.checkerframework.dataflow.qual.Pure
    public   boolean hasWildcard( NullReferenceType this) {
        return false;
    }

    @org.checkerframework.dataflow.qual.Pure
    public   boolean hasCaptureVariable( NullReferenceType this) {
        return false;
    }

    @org.checkerframework.dataflow.qual.Pure
    public   boolean isSubtypeOf( NullReferenceType this,  Type otherType) {
        return !otherType.equals(JavaTypes.VOID_TYPE) && otherType.isReferenceType();
    }
}

package randoop.types;

import java.util.List;
import randoop.types.LazyParameterBound.LazyBoundException;

/**
 * Represents a bound on a type variable where the bound is a {@link ReferenceType} that can be used
 * directly. Contrast with {@link LazyReferenceBound}.
 */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.mustcall.MustCallChecker")
class EagerReferenceBound extends ReferenceBound {

    /**
     * Creates a bound for the given reference type.
     *
     * @param boundType the reference boundType
     */
    EagerReferenceBound(@org.checkerframework.checker.mustcall.qual.MustCall({}) ReferenceType boundType) {
        super(boundType);
    }

    public @org.checkerframework.checker.mustcall.qual.MustCall({}) EagerReferenceBound substitute(@org.checkerframework.checker.mustcall.qual.MustCall({}) EagerReferenceBound this, @org.checkerframework.checker.mustcall.qual.MustCall({}) Substitution substitution) {
        ReferenceType referenceType = getBoundType().substitute(substitution);
        if (referenceType.equals(getBoundType())) {
            return this;
        }
        return new EagerReferenceBound(referenceType);
    }

    public @org.checkerframework.checker.mustcall.qual.MustCall({}) EagerReferenceBound applyCaptureConversion(@org.checkerframework.checker.mustcall.qual.MustCall({}) EagerReferenceBound this) {
        ReferenceType referenceType = getBoundType().applyCaptureConversion();
        if (referenceType.equals(getBoundType())) {
            return this;
        }
        return new EagerReferenceBound(referenceType);
    }

    @org.checkerframework.dataflow.qual.SideEffectFree
    public @org.checkerframework.checker.mustcall.qual.MustCall({}) List<TypeVariable> getTypeParameters(@org.checkerframework.checker.mustcall.qual.MustCall({}) EagerReferenceBound this) {
        return getBoundType().getTypeParameters();
    }

    public  @org.checkerframework.checker.mustcall.qual.MustCall({}) boolean isLowerBound(@org.checkerframework.checker.mustcall.qual.MustCall({}) EagerReferenceBound this, @org.checkerframework.checker.mustcall.qual.MustCall({}) Type argType, @org.checkerframework.checker.mustcall.qual.MustCall({}) Substitution subst) {
        ReferenceType boundType = this.getBoundType().substitute(subst);
        if (boundType.equals(JavaTypes.NULL_TYPE)) {
            return true;
        }
        if (boundType.isVariable()) {
            return ((TypeVariable) boundType).getLowerTypeBound().isLowerBound(argType, subst);
        }
        if (argType.isParameterized()) {
            if (!(boundType instanceof ClassOrInterfaceType)) {
                return false;
            }
            InstantiatedType argClassType = (InstantiatedType) argType.applyCaptureConversion();
            InstantiatedType boundSuperType = ((ClassOrInterfaceType) boundType).getMatchingSupertype(argClassType.getGenericClassType());
            if (boundSuperType == null) {
                return false;
            }
            boundSuperType = boundSuperType.applyCaptureConversion();
            return boundSuperType.isInstantiationOf(argClassType);
        }
        return boundType.isSubtypeOf(argType);
    }

    @org.checkerframework.dataflow.qual.Pure
     @org.checkerframework.checker.mustcall.qual.MustCall({}) boolean isLowerBound(@org.checkerframework.checker.mustcall.qual.MustCall({}) EagerReferenceBound this, @org.checkerframework.checker.mustcall.qual.MustCall({}) ParameterBound bound, @org.checkerframework.checker.mustcall.qual.MustCall({}) Substitution substitution) {
        assert bound instanceof EagerReferenceBound : "only handling reference bounds";
        return isLowerBound(((EagerReferenceBound) bound).getBoundType(), substitution);
    }

    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.mustcall.qual.MustCall({}) boolean isSubtypeOf(@org.checkerframework.checker.mustcall.qual.MustCall({}) EagerReferenceBound this, @org.checkerframework.checker.mustcall.qual.MustCall({}) ParameterBound bound) {
        if (bound instanceof EagerReferenceBound) {
            return this.getBoundType().isSubtypeOf(((EagerReferenceBound) bound).getBoundType());
        }
        assert false : "not handling EagerReferenceBound subtype of other bound type";
        return false;
    }

    public  @org.checkerframework.checker.mustcall.qual.MustCall({}) boolean isUpperBound(@org.checkerframework.checker.mustcall.qual.MustCall({}) EagerReferenceBound this, @org.checkerframework.checker.mustcall.qual.MustCall({}) Type argType, @org.checkerframework.checker.mustcall.qual.MustCall({}) Substitution subst) {
        ReferenceType boundType = this.getBoundType().substitute(subst);
        if (boundType.equals(JavaTypes.OBJECT_TYPE)) {
            return true;
        }
        if (boundType.isVariable()) {
            return ((TypeVariable) boundType).getUpperTypeBound().isUpperBound(argType, subst);
        }
        if (boundType.isParameterized()) {
            if (!(argType instanceof ClassOrInterfaceType)) {
                return false;
            }
            InstantiatedType boundClassType;
            try {
                boundClassType = (InstantiatedType) boundType.applyCaptureConversion();
            } catch (LazyBoundException e) {
                // Capture conversion does not (currently?) work for a lazy bound.
                return false;
            }
            InstantiatedType argSuperType = ((ClassOrInterfaceType) argType).getMatchingSupertype(boundClassType.getGenericClassType());
            if (argSuperType == null) {
                return false;
            }
            argSuperType = argSuperType.applyCaptureConversion();
            return argSuperType.isInstantiationOf(boundClassType);
        }
        return argType.isSubtypeOf(boundType);
    }

    @org.checkerframework.dataflow.qual.Pure
     @org.checkerframework.checker.mustcall.qual.MustCall({}) boolean isUpperBound(@org.checkerframework.checker.mustcall.qual.MustCall({}) EagerReferenceBound this, @org.checkerframework.checker.mustcall.qual.MustCall({}) ParameterBound bound, @org.checkerframework.checker.mustcall.qual.MustCall({}) Substitution substitution) {
        return isUpperBound(getBoundType(), substitution);
    }
}

package randoop.instrument;

/**
 * Exception representing an error in a replacement file.
 */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.resourceleak.ResourceLeakChecker")
class ReplacementFileException extends Throwable {

    /**
     * The name of the replacement file in which the error occurred.
     */
    private final @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) String filename;

    /**
     * The line of the file where the error occurred.
     */
    private final  @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) int lineNumber;

    /**
     * The text of the line where the error occurred.
     */
    private final @org.checkerframework.checker.calledmethods.qual.CalledMethods({ "trim" }) String lineText;

    /**
     * Creates a {@link ReplacementFileException} with the message.
     *
     * @param msg the exception message
     * @param filename the replacement file name
     * @param lineNumber the line of the file where the error occurred
     * @param lineText the text of the line where the error occurred
     */
    ReplacementFileException(@org.checkerframework.checker.calledmethods.qual.CalledMethods({}) String msg, @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) String filename,  @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) int lineNumber, @org.checkerframework.checker.calledmethods.qual.CalledMethods({ "trim" }) String lineText) {
        super(msg);
        this.filename = filename;
        this.lineNumber = lineNumber;
        this.lineText = lineText;
    }

    /**
     * {@inheritDoc}
     *
     * <p>Returns the message followed by the line text
     */
    @org.checkerframework.checker.calledmethods.qual.EnsuresCalledMethods(value = { "this" }, methods = { "getMessage" })
    @org.checkerframework.dataflow.qual.SideEffectFree
    public @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) String getMessage(@org.checkerframework.checker.calledmethods.qual.CalledMethods({}) ReplacementFileException this) {
        return String.format("%s:%d: %s for line: %s", filename, lineNumber, super.getMessage(), lineText);
    }

    /**
     * {@inheritDoc}
     *
     * <p>Returns a string in the format {@code file-name:line-number: message}.
     */
    @org.checkerframework.checker.calledmethods.qual.EnsuresCalledMethods(value = { "this" }, methods = { "toString" })
    @org.checkerframework.dataflow.qual.SideEffectFree
    public @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) String toString(@org.checkerframework.checker.calledmethods.qual.CalledMethods({}) ReplacementFileException this) {
        return String.format("%s:%d: %s for line: %s", filename, lineNumber, super.toString(), lineText);
    }
}

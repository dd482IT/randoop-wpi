package randoop.generation;

import java.util.HashMap;
import java.util.Map;
import randoop.sequence.Sequence;
import randoop.util.Randomness;
import randoop.util.SimpleList;

/**
 * Select input sequences, favoring shorter sequences. This makes Randoop produce smaller JUnit
 * tests.
 */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.resourceleak.ResourceLeakChecker")
public class SmallTestsSequenceSelection extends InputSequenceSelector {

    /**
     * Map from a sequence to its weight.
     */
    private final @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) Map<Sequence, Double> weightMap = new HashMap<>();

    /**
     * Pick a sequence from the candidate list using a weighting that favors shorter sequences.
     *
     * @param candidates sequences to choose from
     * @return the chosen sequence
     */
    @org.checkerframework.checker.calledmethods.qual.EnsuresCalledMethods(value = { "#1" }, methods = { "get", "isEmpty", "size" })
    @org.checkerframework.checker.calledmethods.qual.EnsuresCalledMethods(value = { "this" }, methods = { "updateWeightMapForCandidates" })
    @org.checkerframework.checker.calledmethods.qual.EnsuresCalledMethods(value = { "this.weightMap" }, methods = { "get" })
    public @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) Sequence selectInputSequence(@org.checkerframework.checker.calledmethods.qual.CalledMethods({}) SmallTestsSequenceSelection this, @org.checkerframework.checker.calledmethods.qual.CalledMethods({ "isEmpty", "size" }) SimpleList<Sequence> candidates) {
        double totalWeight = updateWeightMapForCandidates(candidates);
        return Randomness.randomMemberWeighted(candidates, weightMap, totalWeight);
    }

    /**
     * Update the weight for any sequence not currently in the map, and compute the total weight.
     *
     * @param candidates the elements to compute a weight for
     * @return the total weight of all the candidates
     */
    private  @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) double updateWeightMapForCandidates(@org.checkerframework.checker.calledmethods.qual.CalledMethods({}) SmallTestsSequenceSelection this, @org.checkerframework.checker.calledmethods.qual.CalledMethods({ "isEmpty", "size" }) SimpleList<Sequence> candidates) {
        double totalWeight = 0.0;
        for (int i = 0; i < candidates.size(); i++) {
            Sequence candidate = candidates.get(i);
            double weight = weightMap.computeIfAbsent(candidate, (Sequence c) -> 1 / (double) c.size());
            totalWeight += weight;
        }
        return totalWeight;
    }
}

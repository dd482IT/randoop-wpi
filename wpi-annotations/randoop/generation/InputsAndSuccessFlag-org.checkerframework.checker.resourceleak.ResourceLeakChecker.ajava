package randoop.generation;

import java.util.List;
import randoop.sequence.Sequence;

/**
 * Represents a set of inputs, plus a boolean that is true if this is a good set of inputs.
 *
 * <p>This is the return type for ForwardGenerator's private {@code selectInputs} method, which is
 * responsible for selecting a set of component sequences to be concatenated into a longer sequence.
 */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.resourceleak.ResourceLeakChecker")
class InputsAndSuccessFlag {

    /**
     * True if private method {@code ForwardGenerator.selectInputs(TypedOperation operation)} was able
     * to find component sequences for all the input types required by the given statement.
     */
    public  @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) boolean success;

    /**
     * The sequences that create the inputs.
     */
    public @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) List<Sequence> sequences;

    /**
     * Same length as {@code sequences}. Each integer is an index into the corresponding sequence, and
     * is a statement that creates/returns a value.
     */
    public @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) List<Integer> indices;

    /**
     * Creates a new InputsAndSuccessFlag.
     *
     * @param success true if there are component sequences for all the input types
     * @param sequences the sequences that create the inputs
     * @param indices index into the sequences, to the statement that creates/returns a value
     */
    public InputsAndSuccessFlag( @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) boolean success, @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) List<Sequence> sequences, @org.checkerframework.checker.calledmethods.qual.CalledMethods({}) List<Integer> indices) {
        this.success = success;
        this.sequences = sequences;
        this.indices = indices;
    }
}
